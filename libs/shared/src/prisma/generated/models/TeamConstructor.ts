
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TeamConstructor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TeamConstructor
 * 
 */
export type TeamConstructorModel = runtime.Types.Result.DefaultSelection<Prisma.$TeamConstructorPayload>

export type AggregateTeamConstructor = {
  _count: TeamConstructorCountAggregateOutputType | null
  _min: TeamConstructorMinAggregateOutputType | null
  _max: TeamConstructorMaxAggregateOutputType | null
}

export type TeamConstructorMinAggregateOutputType = {
  id: string | null
  constructorId: string | null
  name: string | null
  nationality: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TeamConstructorMaxAggregateOutputType = {
  id: string | null
  constructorId: string | null
  name: string | null
  nationality: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TeamConstructorCountAggregateOutputType = {
  id: number
  constructorId: number
  name: number
  nationality: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TeamConstructorMinAggregateInputType = {
  id?: true
  constructorId?: true
  name?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
}

export type TeamConstructorMaxAggregateInputType = {
  id?: true
  constructorId?: true
  name?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
}

export type TeamConstructorCountAggregateInputType = {
  id?: true
  constructorId?: true
  name?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TeamConstructorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeamConstructor to aggregate.
   */
  where?: Prisma.TeamConstructorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamConstructors to fetch.
   */
  orderBy?: Prisma.TeamConstructorOrderByWithRelationInput | Prisma.TeamConstructorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TeamConstructorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamConstructors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamConstructors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TeamConstructors
  **/
  _count?: true | TeamConstructorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TeamConstructorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TeamConstructorMaxAggregateInputType
}

export type GetTeamConstructorAggregateType<T extends TeamConstructorAggregateArgs> = {
      [P in keyof T & keyof AggregateTeamConstructor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeamConstructor[P]>
    : Prisma.GetScalarType<T[P], AggregateTeamConstructor[P]>
}




export type TeamConstructorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeamConstructorWhereInput
  orderBy?: Prisma.TeamConstructorOrderByWithAggregationInput | Prisma.TeamConstructorOrderByWithAggregationInput[]
  by: Prisma.TeamConstructorScalarFieldEnum[] | Prisma.TeamConstructorScalarFieldEnum
  having?: Prisma.TeamConstructorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeamConstructorCountAggregateInputType | true
  _min?: TeamConstructorMinAggregateInputType
  _max?: TeamConstructorMaxAggregateInputType
}

export type TeamConstructorGroupByOutputType = {
  id: string
  constructorId: string
  name: string
  nationality: string
  createdAt: Date
  updatedAt: Date
  _count: TeamConstructorCountAggregateOutputType | null
  _min: TeamConstructorMinAggregateOutputType | null
  _max: TeamConstructorMaxAggregateOutputType | null
}

type GetTeamConstructorGroupByPayload<T extends TeamConstructorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeamConstructorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TeamConstructorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeamConstructorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeamConstructorGroupByOutputType[P]>
      }
    >
  > 



export type TeamConstructorWhereInput = {
  AND?: Prisma.TeamConstructorWhereInput | Prisma.TeamConstructorWhereInput[]
  OR?: Prisma.TeamConstructorWhereInput[]
  NOT?: Prisma.TeamConstructorWhereInput | Prisma.TeamConstructorWhereInput[]
  id?: Prisma.StringFilter<"TeamConstructor"> | string
  constructorId?: Prisma.StringFilter<"TeamConstructor"> | string
  name?: Prisma.StringFilter<"TeamConstructor"> | string
  nationality?: Prisma.StringFilter<"TeamConstructor"> | string
  createdAt?: Prisma.DateTimeFilter<"TeamConstructor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TeamConstructor"> | Date | string
  driverRaceWinner?: Prisma.RaceListRelationFilter
  driverSeasonWinner?: Prisma.SeasonListRelationFilter
}

export type TeamConstructorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  driverRaceWinner?: Prisma.RaceOrderByRelationAggregateInput
  driverSeasonWinner?: Prisma.SeasonOrderByRelationAggregateInput
}

export type TeamConstructorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  constructorId?: string
  name?: string
  AND?: Prisma.TeamConstructorWhereInput | Prisma.TeamConstructorWhereInput[]
  OR?: Prisma.TeamConstructorWhereInput[]
  NOT?: Prisma.TeamConstructorWhereInput | Prisma.TeamConstructorWhereInput[]
  nationality?: Prisma.StringFilter<"TeamConstructor"> | string
  createdAt?: Prisma.DateTimeFilter<"TeamConstructor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TeamConstructor"> | Date | string
  driverRaceWinner?: Prisma.RaceListRelationFilter
  driverSeasonWinner?: Prisma.SeasonListRelationFilter
}, "id" | "constructorId" | "name">

export type TeamConstructorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TeamConstructorCountOrderByAggregateInput
  _max?: Prisma.TeamConstructorMaxOrderByAggregateInput
  _min?: Prisma.TeamConstructorMinOrderByAggregateInput
}

export type TeamConstructorScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeamConstructorScalarWhereWithAggregatesInput | Prisma.TeamConstructorScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeamConstructorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TeamConstructorScalarWhereWithAggregatesInput | Prisma.TeamConstructorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TeamConstructor"> | string
  constructorId?: Prisma.StringWithAggregatesFilter<"TeamConstructor"> | string
  name?: Prisma.StringWithAggregatesFilter<"TeamConstructor"> | string
  nationality?: Prisma.StringWithAggregatesFilter<"TeamConstructor"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TeamConstructor"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TeamConstructor"> | Date | string
}

export type TeamConstructorCreateInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverRaceWinner?: Prisma.RaceCreateNestedManyWithoutWinnerConstructorInput
  driverSeasonWinner?: Prisma.SeasonCreateNestedManyWithoutChampionConstructorInput
}

export type TeamConstructorUncheckedCreateInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverRaceWinner?: Prisma.RaceUncheckedCreateNestedManyWithoutWinnerConstructorInput
  driverSeasonWinner?: Prisma.SeasonUncheckedCreateNestedManyWithoutChampionConstructorInput
}

export type TeamConstructorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverRaceWinner?: Prisma.RaceUpdateManyWithoutWinnerConstructorNestedInput
  driverSeasonWinner?: Prisma.SeasonUpdateManyWithoutChampionConstructorNestedInput
}

export type TeamConstructorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverRaceWinner?: Prisma.RaceUncheckedUpdateManyWithoutWinnerConstructorNestedInput
  driverSeasonWinner?: Prisma.SeasonUncheckedUpdateManyWithoutChampionConstructorNestedInput
}

export type TeamConstructorCreateManyInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeamConstructorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeamConstructorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeamConstructorScalarRelationFilter = {
  is?: Prisma.TeamConstructorWhereInput
  isNot?: Prisma.TeamConstructorWhereInput
}

export type TeamConstructorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeamConstructorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeamConstructorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeamConstructorCreateNestedOneWithoutDriverSeasonWinnerInput = {
  create?: Prisma.XOR<Prisma.TeamConstructorCreateWithoutDriverSeasonWinnerInput, Prisma.TeamConstructorUncheckedCreateWithoutDriverSeasonWinnerInput>
  connectOrCreate?: Prisma.TeamConstructorCreateOrConnectWithoutDriverSeasonWinnerInput
  connect?: Prisma.TeamConstructorWhereUniqueInput
}

export type TeamConstructorUpdateOneRequiredWithoutDriverSeasonWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.TeamConstructorCreateWithoutDriverSeasonWinnerInput, Prisma.TeamConstructorUncheckedCreateWithoutDriverSeasonWinnerInput>
  connectOrCreate?: Prisma.TeamConstructorCreateOrConnectWithoutDriverSeasonWinnerInput
  upsert?: Prisma.TeamConstructorUpsertWithoutDriverSeasonWinnerInput
  connect?: Prisma.TeamConstructorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeamConstructorUpdateToOneWithWhereWithoutDriverSeasonWinnerInput, Prisma.TeamConstructorUpdateWithoutDriverSeasonWinnerInput>, Prisma.TeamConstructorUncheckedUpdateWithoutDriverSeasonWinnerInput>
}

export type TeamConstructorCreateNestedOneWithoutDriverRaceWinnerInput = {
  create?: Prisma.XOR<Prisma.TeamConstructorCreateWithoutDriverRaceWinnerInput, Prisma.TeamConstructorUncheckedCreateWithoutDriverRaceWinnerInput>
  connectOrCreate?: Prisma.TeamConstructorCreateOrConnectWithoutDriverRaceWinnerInput
  connect?: Prisma.TeamConstructorWhereUniqueInput
}

export type TeamConstructorUpdateOneRequiredWithoutDriverRaceWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.TeamConstructorCreateWithoutDriverRaceWinnerInput, Prisma.TeamConstructorUncheckedCreateWithoutDriverRaceWinnerInput>
  connectOrCreate?: Prisma.TeamConstructorCreateOrConnectWithoutDriverRaceWinnerInput
  upsert?: Prisma.TeamConstructorUpsertWithoutDriverRaceWinnerInput
  connect?: Prisma.TeamConstructorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeamConstructorUpdateToOneWithWhereWithoutDriverRaceWinnerInput, Prisma.TeamConstructorUpdateWithoutDriverRaceWinnerInput>, Prisma.TeamConstructorUncheckedUpdateWithoutDriverRaceWinnerInput>
}

export type TeamConstructorCreateWithoutDriverSeasonWinnerInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverRaceWinner?: Prisma.RaceCreateNestedManyWithoutWinnerConstructorInput
}

export type TeamConstructorUncheckedCreateWithoutDriverSeasonWinnerInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverRaceWinner?: Prisma.RaceUncheckedCreateNestedManyWithoutWinnerConstructorInput
}

export type TeamConstructorCreateOrConnectWithoutDriverSeasonWinnerInput = {
  where: Prisma.TeamConstructorWhereUniqueInput
  create: Prisma.XOR<Prisma.TeamConstructorCreateWithoutDriverSeasonWinnerInput, Prisma.TeamConstructorUncheckedCreateWithoutDriverSeasonWinnerInput>
}

export type TeamConstructorUpsertWithoutDriverSeasonWinnerInput = {
  update: Prisma.XOR<Prisma.TeamConstructorUpdateWithoutDriverSeasonWinnerInput, Prisma.TeamConstructorUncheckedUpdateWithoutDriverSeasonWinnerInput>
  create: Prisma.XOR<Prisma.TeamConstructorCreateWithoutDriverSeasonWinnerInput, Prisma.TeamConstructorUncheckedCreateWithoutDriverSeasonWinnerInput>
  where?: Prisma.TeamConstructorWhereInput
}

export type TeamConstructorUpdateToOneWithWhereWithoutDriverSeasonWinnerInput = {
  where?: Prisma.TeamConstructorWhereInput
  data: Prisma.XOR<Prisma.TeamConstructorUpdateWithoutDriverSeasonWinnerInput, Prisma.TeamConstructorUncheckedUpdateWithoutDriverSeasonWinnerInput>
}

export type TeamConstructorUpdateWithoutDriverSeasonWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverRaceWinner?: Prisma.RaceUpdateManyWithoutWinnerConstructorNestedInput
}

export type TeamConstructorUncheckedUpdateWithoutDriverSeasonWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverRaceWinner?: Prisma.RaceUncheckedUpdateManyWithoutWinnerConstructorNestedInput
}

export type TeamConstructorCreateWithoutDriverRaceWinnerInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverSeasonWinner?: Prisma.SeasonCreateNestedManyWithoutChampionConstructorInput
}

export type TeamConstructorUncheckedCreateWithoutDriverRaceWinnerInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverSeasonWinner?: Prisma.SeasonUncheckedCreateNestedManyWithoutChampionConstructorInput
}

export type TeamConstructorCreateOrConnectWithoutDriverRaceWinnerInput = {
  where: Prisma.TeamConstructorWhereUniqueInput
  create: Prisma.XOR<Prisma.TeamConstructorCreateWithoutDriverRaceWinnerInput, Prisma.TeamConstructorUncheckedCreateWithoutDriverRaceWinnerInput>
}

export type TeamConstructorUpsertWithoutDriverRaceWinnerInput = {
  update: Prisma.XOR<Prisma.TeamConstructorUpdateWithoutDriverRaceWinnerInput, Prisma.TeamConstructorUncheckedUpdateWithoutDriverRaceWinnerInput>
  create: Prisma.XOR<Prisma.TeamConstructorCreateWithoutDriverRaceWinnerInput, Prisma.TeamConstructorUncheckedCreateWithoutDriverRaceWinnerInput>
  where?: Prisma.TeamConstructorWhereInput
}

export type TeamConstructorUpdateToOneWithWhereWithoutDriverRaceWinnerInput = {
  where?: Prisma.TeamConstructorWhereInput
  data: Prisma.XOR<Prisma.TeamConstructorUpdateWithoutDriverRaceWinnerInput, Prisma.TeamConstructorUncheckedUpdateWithoutDriverRaceWinnerInput>
}

export type TeamConstructorUpdateWithoutDriverRaceWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverSeasonWinner?: Prisma.SeasonUpdateManyWithoutChampionConstructorNestedInput
}

export type TeamConstructorUncheckedUpdateWithoutDriverRaceWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverSeasonWinner?: Prisma.SeasonUncheckedUpdateManyWithoutChampionConstructorNestedInput
}


/**
 * Count Type TeamConstructorCountOutputType
 */

export type TeamConstructorCountOutputType = {
  driverRaceWinner: number
  driverSeasonWinner: number
}

export type TeamConstructorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  driverRaceWinner?: boolean | TeamConstructorCountOutputTypeCountDriverRaceWinnerArgs
  driverSeasonWinner?: boolean | TeamConstructorCountOutputTypeCountDriverSeasonWinnerArgs
}

/**
 * TeamConstructorCountOutputType without action
 */
export type TeamConstructorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructorCountOutputType
   */
  select?: Prisma.TeamConstructorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TeamConstructorCountOutputType without action
 */
export type TeamConstructorCountOutputTypeCountDriverRaceWinnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RaceWhereInput
}

/**
 * TeamConstructorCountOutputType without action
 */
export type TeamConstructorCountOutputTypeCountDriverSeasonWinnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SeasonWhereInput
}


export type TeamConstructorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  constructorId?: boolean
  name?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  driverRaceWinner?: boolean | Prisma.TeamConstructor$driverRaceWinnerArgs<ExtArgs>
  driverSeasonWinner?: boolean | Prisma.TeamConstructor$driverSeasonWinnerArgs<ExtArgs>
  _count?: boolean | Prisma.TeamConstructorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teamConstructor"]>

export type TeamConstructorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  constructorId?: boolean
  name?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["teamConstructor"]>

export type TeamConstructorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  constructorId?: boolean
  name?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["teamConstructor"]>

export type TeamConstructorSelectScalar = {
  id?: boolean
  constructorId?: boolean
  name?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TeamConstructorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "constructorId" | "name" | "nationality" | "createdAt" | "updatedAt", ExtArgs["result"]["teamConstructor"]>
export type TeamConstructorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  driverRaceWinner?: boolean | Prisma.TeamConstructor$driverRaceWinnerArgs<ExtArgs>
  driverSeasonWinner?: boolean | Prisma.TeamConstructor$driverSeasonWinnerArgs<ExtArgs>
  _count?: boolean | Prisma.TeamConstructorCountOutputTypeDefaultArgs<ExtArgs>
}
export type TeamConstructorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type TeamConstructorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $TeamConstructorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TeamConstructor"
  objects: {
    driverRaceWinner: Prisma.$RacePayload<ExtArgs>[]
    driverSeasonWinner: Prisma.$SeasonPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    constructorId: string
    name: string
    nationality: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["teamConstructor"]>
  composites: {}
}

export type TeamConstructorGetPayload<S extends boolean | null | undefined | TeamConstructorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload, S>

export type TeamConstructorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TeamConstructorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TeamConstructorCountAggregateInputType | true
  }

export interface TeamConstructorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamConstructor'], meta: { name: 'TeamConstructor' } }
  /**
   * Find zero or one TeamConstructor that matches the filter.
   * @param {TeamConstructorFindUniqueArgs} args - Arguments to find a TeamConstructor
   * @example
   * // Get one TeamConstructor
   * const teamConstructor = await prisma.teamConstructor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeamConstructorFindUniqueArgs>(args: Prisma.SelectSubset<T, TeamConstructorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TeamConstructorClient<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TeamConstructor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeamConstructorFindUniqueOrThrowArgs} args - Arguments to find a TeamConstructor
   * @example
   * // Get one TeamConstructor
   * const teamConstructor = await prisma.teamConstructor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeamConstructorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TeamConstructorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeamConstructorClient<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeamConstructor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamConstructorFindFirstArgs} args - Arguments to find a TeamConstructor
   * @example
   * // Get one TeamConstructor
   * const teamConstructor = await prisma.teamConstructor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeamConstructorFindFirstArgs>(args?: Prisma.SelectSubset<T, TeamConstructorFindFirstArgs<ExtArgs>>): Prisma.Prisma__TeamConstructorClient<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeamConstructor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamConstructorFindFirstOrThrowArgs} args - Arguments to find a TeamConstructor
   * @example
   * // Get one TeamConstructor
   * const teamConstructor = await prisma.teamConstructor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeamConstructorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TeamConstructorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeamConstructorClient<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TeamConstructors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamConstructorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeamConstructors
   * const teamConstructors = await prisma.teamConstructor.findMany()
   * 
   * // Get first 10 TeamConstructors
   * const teamConstructors = await prisma.teamConstructor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teamConstructorWithIdOnly = await prisma.teamConstructor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TeamConstructorFindManyArgs>(args?: Prisma.SelectSubset<T, TeamConstructorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TeamConstructor.
   * @param {TeamConstructorCreateArgs} args - Arguments to create a TeamConstructor.
   * @example
   * // Create one TeamConstructor
   * const TeamConstructor = await prisma.teamConstructor.create({
   *   data: {
   *     // ... data to create a TeamConstructor
   *   }
   * })
   * 
   */
  create<T extends TeamConstructorCreateArgs>(args: Prisma.SelectSubset<T, TeamConstructorCreateArgs<ExtArgs>>): Prisma.Prisma__TeamConstructorClient<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TeamConstructors.
   * @param {TeamConstructorCreateManyArgs} args - Arguments to create many TeamConstructors.
   * @example
   * // Create many TeamConstructors
   * const teamConstructor = await prisma.teamConstructor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TeamConstructorCreateManyArgs>(args?: Prisma.SelectSubset<T, TeamConstructorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TeamConstructors and returns the data saved in the database.
   * @param {TeamConstructorCreateManyAndReturnArgs} args - Arguments to create many TeamConstructors.
   * @example
   * // Create many TeamConstructors
   * const teamConstructor = await prisma.teamConstructor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TeamConstructors and only return the `id`
   * const teamConstructorWithIdOnly = await prisma.teamConstructor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TeamConstructorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TeamConstructorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TeamConstructor.
   * @param {TeamConstructorDeleteArgs} args - Arguments to delete one TeamConstructor.
   * @example
   * // Delete one TeamConstructor
   * const TeamConstructor = await prisma.teamConstructor.delete({
   *   where: {
   *     // ... filter to delete one TeamConstructor
   *   }
   * })
   * 
   */
  delete<T extends TeamConstructorDeleteArgs>(args: Prisma.SelectSubset<T, TeamConstructorDeleteArgs<ExtArgs>>): Prisma.Prisma__TeamConstructorClient<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TeamConstructor.
   * @param {TeamConstructorUpdateArgs} args - Arguments to update one TeamConstructor.
   * @example
   * // Update one TeamConstructor
   * const teamConstructor = await prisma.teamConstructor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TeamConstructorUpdateArgs>(args: Prisma.SelectSubset<T, TeamConstructorUpdateArgs<ExtArgs>>): Prisma.Prisma__TeamConstructorClient<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TeamConstructors.
   * @param {TeamConstructorDeleteManyArgs} args - Arguments to filter TeamConstructors to delete.
   * @example
   * // Delete a few TeamConstructors
   * const { count } = await prisma.teamConstructor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TeamConstructorDeleteManyArgs>(args?: Prisma.SelectSubset<T, TeamConstructorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeamConstructors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamConstructorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeamConstructors
   * const teamConstructor = await prisma.teamConstructor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TeamConstructorUpdateManyArgs>(args: Prisma.SelectSubset<T, TeamConstructorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeamConstructors and returns the data updated in the database.
   * @param {TeamConstructorUpdateManyAndReturnArgs} args - Arguments to update many TeamConstructors.
   * @example
   * // Update many TeamConstructors
   * const teamConstructor = await prisma.teamConstructor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TeamConstructors and only return the `id`
   * const teamConstructorWithIdOnly = await prisma.teamConstructor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TeamConstructorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TeamConstructorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TeamConstructor.
   * @param {TeamConstructorUpsertArgs} args - Arguments to update or create a TeamConstructor.
   * @example
   * // Update or create a TeamConstructor
   * const teamConstructor = await prisma.teamConstructor.upsert({
   *   create: {
   *     // ... data to create a TeamConstructor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeamConstructor we want to update
   *   }
   * })
   */
  upsert<T extends TeamConstructorUpsertArgs>(args: Prisma.SelectSubset<T, TeamConstructorUpsertArgs<ExtArgs>>): Prisma.Prisma__TeamConstructorClient<runtime.Types.Result.GetResult<Prisma.$TeamConstructorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TeamConstructors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamConstructorCountArgs} args - Arguments to filter TeamConstructors to count.
   * @example
   * // Count the number of TeamConstructors
   * const count = await prisma.teamConstructor.count({
   *   where: {
   *     // ... the filter for the TeamConstructors we want to count
   *   }
   * })
  **/
  count<T extends TeamConstructorCountArgs>(
    args?: Prisma.Subset<T, TeamConstructorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeamConstructorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TeamConstructor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamConstructorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TeamConstructorAggregateArgs>(args: Prisma.Subset<T, TeamConstructorAggregateArgs>): Prisma.PrismaPromise<GetTeamConstructorAggregateType<T>>

  /**
   * Group by TeamConstructor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamConstructorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TeamConstructorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeamConstructorGroupByArgs['orderBy'] }
      : { orderBy?: TeamConstructorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TeamConstructorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamConstructorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TeamConstructor model
 */
readonly fields: TeamConstructorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeamConstructor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeamConstructorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  driverRaceWinner<T extends Prisma.TeamConstructor$driverRaceWinnerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TeamConstructor$driverRaceWinnerArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  driverSeasonWinner<T extends Prisma.TeamConstructor$driverSeasonWinnerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TeamConstructor$driverSeasonWinnerArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TeamConstructor model
 */
export interface TeamConstructorFieldRefs {
  readonly id: Prisma.FieldRef<"TeamConstructor", 'String'>
  readonly constructorId: Prisma.FieldRef<"TeamConstructor", 'String'>
  readonly name: Prisma.FieldRef<"TeamConstructor", 'String'>
  readonly nationality: Prisma.FieldRef<"TeamConstructor", 'String'>
  readonly createdAt: Prisma.FieldRef<"TeamConstructor", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TeamConstructor", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TeamConstructor findUnique
 */
export type TeamConstructorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * Filter, which TeamConstructor to fetch.
   */
  where: Prisma.TeamConstructorWhereUniqueInput
}

/**
 * TeamConstructor findUniqueOrThrow
 */
export type TeamConstructorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * Filter, which TeamConstructor to fetch.
   */
  where: Prisma.TeamConstructorWhereUniqueInput
}

/**
 * TeamConstructor findFirst
 */
export type TeamConstructorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * Filter, which TeamConstructor to fetch.
   */
  where?: Prisma.TeamConstructorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamConstructors to fetch.
   */
  orderBy?: Prisma.TeamConstructorOrderByWithRelationInput | Prisma.TeamConstructorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeamConstructors.
   */
  cursor?: Prisma.TeamConstructorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamConstructors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamConstructors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeamConstructors.
   */
  distinct?: Prisma.TeamConstructorScalarFieldEnum | Prisma.TeamConstructorScalarFieldEnum[]
}

/**
 * TeamConstructor findFirstOrThrow
 */
export type TeamConstructorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * Filter, which TeamConstructor to fetch.
   */
  where?: Prisma.TeamConstructorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamConstructors to fetch.
   */
  orderBy?: Prisma.TeamConstructorOrderByWithRelationInput | Prisma.TeamConstructorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeamConstructors.
   */
  cursor?: Prisma.TeamConstructorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamConstructors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamConstructors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeamConstructors.
   */
  distinct?: Prisma.TeamConstructorScalarFieldEnum | Prisma.TeamConstructorScalarFieldEnum[]
}

/**
 * TeamConstructor findMany
 */
export type TeamConstructorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * Filter, which TeamConstructors to fetch.
   */
  where?: Prisma.TeamConstructorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamConstructors to fetch.
   */
  orderBy?: Prisma.TeamConstructorOrderByWithRelationInput | Prisma.TeamConstructorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TeamConstructors.
   */
  cursor?: Prisma.TeamConstructorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamConstructors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamConstructors.
   */
  skip?: number
  distinct?: Prisma.TeamConstructorScalarFieldEnum | Prisma.TeamConstructorScalarFieldEnum[]
}

/**
 * TeamConstructor create
 */
export type TeamConstructorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * The data needed to create a TeamConstructor.
   */
  data: Prisma.XOR<Prisma.TeamConstructorCreateInput, Prisma.TeamConstructorUncheckedCreateInput>
}

/**
 * TeamConstructor createMany
 */
export type TeamConstructorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TeamConstructors.
   */
  data: Prisma.TeamConstructorCreateManyInput | Prisma.TeamConstructorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeamConstructor createManyAndReturn
 */
export type TeamConstructorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * The data used to create many TeamConstructors.
   */
  data: Prisma.TeamConstructorCreateManyInput | Prisma.TeamConstructorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeamConstructor update
 */
export type TeamConstructorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * The data needed to update a TeamConstructor.
   */
  data: Prisma.XOR<Prisma.TeamConstructorUpdateInput, Prisma.TeamConstructorUncheckedUpdateInput>
  /**
   * Choose, which TeamConstructor to update.
   */
  where: Prisma.TeamConstructorWhereUniqueInput
}

/**
 * TeamConstructor updateMany
 */
export type TeamConstructorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TeamConstructors.
   */
  data: Prisma.XOR<Prisma.TeamConstructorUpdateManyMutationInput, Prisma.TeamConstructorUncheckedUpdateManyInput>
  /**
   * Filter which TeamConstructors to update
   */
  where?: Prisma.TeamConstructorWhereInput
  /**
   * Limit how many TeamConstructors to update.
   */
  limit?: number
}

/**
 * TeamConstructor updateManyAndReturn
 */
export type TeamConstructorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * The data used to update TeamConstructors.
   */
  data: Prisma.XOR<Prisma.TeamConstructorUpdateManyMutationInput, Prisma.TeamConstructorUncheckedUpdateManyInput>
  /**
   * Filter which TeamConstructors to update
   */
  where?: Prisma.TeamConstructorWhereInput
  /**
   * Limit how many TeamConstructors to update.
   */
  limit?: number
}

/**
 * TeamConstructor upsert
 */
export type TeamConstructorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * The filter to search for the TeamConstructor to update in case it exists.
   */
  where: Prisma.TeamConstructorWhereUniqueInput
  /**
   * In case the TeamConstructor found by the `where` argument doesn't exist, create a new TeamConstructor with this data.
   */
  create: Prisma.XOR<Prisma.TeamConstructorCreateInput, Prisma.TeamConstructorUncheckedCreateInput>
  /**
   * In case the TeamConstructor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeamConstructorUpdateInput, Prisma.TeamConstructorUncheckedUpdateInput>
}

/**
 * TeamConstructor delete
 */
export type TeamConstructorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
  /**
   * Filter which TeamConstructor to delete.
   */
  where: Prisma.TeamConstructorWhereUniqueInput
}

/**
 * TeamConstructor deleteMany
 */
export type TeamConstructorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeamConstructors to delete
   */
  where?: Prisma.TeamConstructorWhereInput
  /**
   * Limit how many TeamConstructors to delete.
   */
  limit?: number
}

/**
 * TeamConstructor.driverRaceWinner
 */
export type TeamConstructor$driverRaceWinnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  where?: Prisma.RaceWhereInput
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  cursor?: Prisma.RaceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RaceScalarFieldEnum | Prisma.RaceScalarFieldEnum[]
}

/**
 * TeamConstructor.driverSeasonWinner
 */
export type TeamConstructor$driverSeasonWinnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  where?: Prisma.SeasonWhereInput
  orderBy?: Prisma.SeasonOrderByWithRelationInput | Prisma.SeasonOrderByWithRelationInput[]
  cursor?: Prisma.SeasonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SeasonScalarFieldEnum | Prisma.SeasonScalarFieldEnum[]
}

/**
 * TeamConstructor without action
 */
export type TeamConstructorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamConstructor
   */
  select?: Prisma.TeamConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamConstructor
   */
  omit?: Prisma.TeamConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamConstructorInclude<ExtArgs> | null
}
