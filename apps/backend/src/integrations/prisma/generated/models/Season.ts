
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Season` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Season
 * 
 */
export type SeasonModel = runtime.Types.Result.DefaultSelection<Prisma.$SeasonPayload>

export type AggregateSeason = {
  _count: SeasonCountAggregateOutputType | null
  _avg: SeasonAvgAggregateOutputType | null
  _sum: SeasonSumAggregateOutputType | null
  _min: SeasonMinAggregateOutputType | null
  _max: SeasonMaxAggregateOutputType | null
}

export type SeasonAvgAggregateOutputType = {
  id: number | null
  year: number | null
}

export type SeasonSumAggregateOutputType = {
  id: number | null
  year: number | null
}

export type SeasonMinAggregateOutputType = {
  id: number | null
  year: number | null
  championId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SeasonMaxAggregateOutputType = {
  id: number | null
  year: number | null
  championId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SeasonCountAggregateOutputType = {
  id: number
  year: number
  championId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SeasonAvgAggregateInputType = {
  id?: true
  year?: true
}

export type SeasonSumAggregateInputType = {
  id?: true
  year?: true
}

export type SeasonMinAggregateInputType = {
  id?: true
  year?: true
  championId?: true
  createdAt?: true
  updatedAt?: true
}

export type SeasonMaxAggregateInputType = {
  id?: true
  year?: true
  championId?: true
  createdAt?: true
  updatedAt?: true
}

export type SeasonCountAggregateInputType = {
  id?: true
  year?: true
  championId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SeasonAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Season to aggregate.
   */
  where?: Prisma.SeasonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Seasons to fetch.
   */
  orderBy?: Prisma.SeasonOrderByWithRelationInput | Prisma.SeasonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SeasonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Seasons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Seasons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Seasons
  **/
  _count?: true | SeasonCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SeasonAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SeasonSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SeasonMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SeasonMaxAggregateInputType
}

export type GetSeasonAggregateType<T extends SeasonAggregateArgs> = {
      [P in keyof T & keyof AggregateSeason]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSeason[P]>
    : Prisma.GetScalarType<T[P], AggregateSeason[P]>
}




export type SeasonGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SeasonWhereInput
  orderBy?: Prisma.SeasonOrderByWithAggregationInput | Prisma.SeasonOrderByWithAggregationInput[]
  by: Prisma.SeasonScalarFieldEnum[] | Prisma.SeasonScalarFieldEnum
  having?: Prisma.SeasonScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SeasonCountAggregateInputType | true
  _avg?: SeasonAvgAggregateInputType
  _sum?: SeasonSumAggregateInputType
  _min?: SeasonMinAggregateInputType
  _max?: SeasonMaxAggregateInputType
}

export type SeasonGroupByOutputType = {
  id: number
  year: number
  championId: string
  createdAt: Date
  updatedAt: Date
  _count: SeasonCountAggregateOutputType | null
  _avg: SeasonAvgAggregateOutputType | null
  _sum: SeasonSumAggregateOutputType | null
  _min: SeasonMinAggregateOutputType | null
  _max: SeasonMaxAggregateOutputType | null
}

type GetSeasonGroupByPayload<T extends SeasonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SeasonGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SeasonGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SeasonGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SeasonGroupByOutputType[P]>
      }
    >
  > 



export type SeasonWhereInput = {
  AND?: Prisma.SeasonWhereInput | Prisma.SeasonWhereInput[]
  OR?: Prisma.SeasonWhereInput[]
  NOT?: Prisma.SeasonWhereInput | Prisma.SeasonWhereInput[]
  id?: Prisma.IntFilter<"Season"> | number
  year?: Prisma.IntFilter<"Season"> | number
  championId?: Prisma.StringFilter<"Season"> | string
  createdAt?: Prisma.DateTimeFilter<"Season"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Season"> | Date | string
  champion?: Prisma.XOR<Prisma.DriverScalarRelationFilter, Prisma.DriverWhereInput>
  races?: Prisma.RaceListRelationFilter
}

export type SeasonOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  championId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  champion?: Prisma.DriverOrderByWithRelationInput
  races?: Prisma.RaceOrderByRelationAggregateInput
}

export type SeasonWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  year?: number
  AND?: Prisma.SeasonWhereInput | Prisma.SeasonWhereInput[]
  OR?: Prisma.SeasonWhereInput[]
  NOT?: Prisma.SeasonWhereInput | Prisma.SeasonWhereInput[]
  championId?: Prisma.StringFilter<"Season"> | string
  createdAt?: Prisma.DateTimeFilter<"Season"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Season"> | Date | string
  champion?: Prisma.XOR<Prisma.DriverScalarRelationFilter, Prisma.DriverWhereInput>
  races?: Prisma.RaceListRelationFilter
}, "id" | "year">

export type SeasonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  championId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SeasonCountOrderByAggregateInput
  _avg?: Prisma.SeasonAvgOrderByAggregateInput
  _max?: Prisma.SeasonMaxOrderByAggregateInput
  _min?: Prisma.SeasonMinOrderByAggregateInput
  _sum?: Prisma.SeasonSumOrderByAggregateInput
}

export type SeasonScalarWhereWithAggregatesInput = {
  AND?: Prisma.SeasonScalarWhereWithAggregatesInput | Prisma.SeasonScalarWhereWithAggregatesInput[]
  OR?: Prisma.SeasonScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SeasonScalarWhereWithAggregatesInput | Prisma.SeasonScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Season"> | number
  year?: Prisma.IntWithAggregatesFilter<"Season"> | number
  championId?: Prisma.StringWithAggregatesFilter<"Season"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Season"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Season"> | Date | string
}

export type SeasonCreateInput = {
  year: number
  createdAt?: Date | string
  updatedAt?: Date | string
  champion: Prisma.DriverCreateNestedOneWithoutChampionshipsInput
  races?: Prisma.RaceCreateNestedManyWithoutSeasonInput
}

export type SeasonUncheckedCreateInput = {
  id?: number
  year: number
  championId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  races?: Prisma.RaceUncheckedCreateNestedManyWithoutSeasonInput
}

export type SeasonUpdateInput = {
  year?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  champion?: Prisma.DriverUpdateOneRequiredWithoutChampionshipsNestedInput
  races?: Prisma.RaceUpdateManyWithoutSeasonNestedInput
}

export type SeasonUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  year?: Prisma.IntFieldUpdateOperationsInput | number
  championId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  races?: Prisma.RaceUncheckedUpdateManyWithoutSeasonNestedInput
}

export type SeasonCreateManyInput = {
  id?: number
  year: number
  championId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SeasonUpdateManyMutationInput = {
  year?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SeasonUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  year?: Prisma.IntFieldUpdateOperationsInput | number
  championId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SeasonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  championId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SeasonAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
}

export type SeasonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  championId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SeasonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  championId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SeasonSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
}

export type SeasonScalarRelationFilter = {
  is?: Prisma.SeasonWhereInput
  isNot?: Prisma.SeasonWhereInput
}

export type SeasonListRelationFilter = {
  every?: Prisma.SeasonWhereInput
  some?: Prisma.SeasonWhereInput
  none?: Prisma.SeasonWhereInput
}

export type SeasonOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type SeasonCreateNestedOneWithoutRacesInput = {
  create?: Prisma.XOR<Prisma.SeasonCreateWithoutRacesInput, Prisma.SeasonUncheckedCreateWithoutRacesInput>
  connectOrCreate?: Prisma.SeasonCreateOrConnectWithoutRacesInput
  connect?: Prisma.SeasonWhereUniqueInput
}

export type SeasonUpdateOneRequiredWithoutRacesNestedInput = {
  create?: Prisma.XOR<Prisma.SeasonCreateWithoutRacesInput, Prisma.SeasonUncheckedCreateWithoutRacesInput>
  connectOrCreate?: Prisma.SeasonCreateOrConnectWithoutRacesInput
  upsert?: Prisma.SeasonUpsertWithoutRacesInput
  connect?: Prisma.SeasonWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SeasonUpdateToOneWithWhereWithoutRacesInput, Prisma.SeasonUpdateWithoutRacesInput>, Prisma.SeasonUncheckedUpdateWithoutRacesInput>
}

export type SeasonCreateNestedManyWithoutChampionInput = {
  create?: Prisma.XOR<Prisma.SeasonCreateWithoutChampionInput, Prisma.SeasonUncheckedCreateWithoutChampionInput> | Prisma.SeasonCreateWithoutChampionInput[] | Prisma.SeasonUncheckedCreateWithoutChampionInput[]
  connectOrCreate?: Prisma.SeasonCreateOrConnectWithoutChampionInput | Prisma.SeasonCreateOrConnectWithoutChampionInput[]
  createMany?: Prisma.SeasonCreateManyChampionInputEnvelope
  connect?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
}

export type SeasonUncheckedCreateNestedManyWithoutChampionInput = {
  create?: Prisma.XOR<Prisma.SeasonCreateWithoutChampionInput, Prisma.SeasonUncheckedCreateWithoutChampionInput> | Prisma.SeasonCreateWithoutChampionInput[] | Prisma.SeasonUncheckedCreateWithoutChampionInput[]
  connectOrCreate?: Prisma.SeasonCreateOrConnectWithoutChampionInput | Prisma.SeasonCreateOrConnectWithoutChampionInput[]
  createMany?: Prisma.SeasonCreateManyChampionInputEnvelope
  connect?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
}

export type SeasonUpdateManyWithoutChampionNestedInput = {
  create?: Prisma.XOR<Prisma.SeasonCreateWithoutChampionInput, Prisma.SeasonUncheckedCreateWithoutChampionInput> | Prisma.SeasonCreateWithoutChampionInput[] | Prisma.SeasonUncheckedCreateWithoutChampionInput[]
  connectOrCreate?: Prisma.SeasonCreateOrConnectWithoutChampionInput | Prisma.SeasonCreateOrConnectWithoutChampionInput[]
  upsert?: Prisma.SeasonUpsertWithWhereUniqueWithoutChampionInput | Prisma.SeasonUpsertWithWhereUniqueWithoutChampionInput[]
  createMany?: Prisma.SeasonCreateManyChampionInputEnvelope
  set?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
  disconnect?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
  delete?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
  connect?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
  update?: Prisma.SeasonUpdateWithWhereUniqueWithoutChampionInput | Prisma.SeasonUpdateWithWhereUniqueWithoutChampionInput[]
  updateMany?: Prisma.SeasonUpdateManyWithWhereWithoutChampionInput | Prisma.SeasonUpdateManyWithWhereWithoutChampionInput[]
  deleteMany?: Prisma.SeasonScalarWhereInput | Prisma.SeasonScalarWhereInput[]
}

export type SeasonUncheckedUpdateManyWithoutChampionNestedInput = {
  create?: Prisma.XOR<Prisma.SeasonCreateWithoutChampionInput, Prisma.SeasonUncheckedCreateWithoutChampionInput> | Prisma.SeasonCreateWithoutChampionInput[] | Prisma.SeasonUncheckedCreateWithoutChampionInput[]
  connectOrCreate?: Prisma.SeasonCreateOrConnectWithoutChampionInput | Prisma.SeasonCreateOrConnectWithoutChampionInput[]
  upsert?: Prisma.SeasonUpsertWithWhereUniqueWithoutChampionInput | Prisma.SeasonUpsertWithWhereUniqueWithoutChampionInput[]
  createMany?: Prisma.SeasonCreateManyChampionInputEnvelope
  set?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
  disconnect?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
  delete?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
  connect?: Prisma.SeasonWhereUniqueInput | Prisma.SeasonWhereUniqueInput[]
  update?: Prisma.SeasonUpdateWithWhereUniqueWithoutChampionInput | Prisma.SeasonUpdateWithWhereUniqueWithoutChampionInput[]
  updateMany?: Prisma.SeasonUpdateManyWithWhereWithoutChampionInput | Prisma.SeasonUpdateManyWithWhereWithoutChampionInput[]
  deleteMany?: Prisma.SeasonScalarWhereInput | Prisma.SeasonScalarWhereInput[]
}

export type SeasonCreateWithoutRacesInput = {
  year: number
  createdAt?: Date | string
  updatedAt?: Date | string
  champion: Prisma.DriverCreateNestedOneWithoutChampionshipsInput
}

export type SeasonUncheckedCreateWithoutRacesInput = {
  id?: number
  year: number
  championId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SeasonCreateOrConnectWithoutRacesInput = {
  where: Prisma.SeasonWhereUniqueInput
  create: Prisma.XOR<Prisma.SeasonCreateWithoutRacesInput, Prisma.SeasonUncheckedCreateWithoutRacesInput>
}

export type SeasonUpsertWithoutRacesInput = {
  update: Prisma.XOR<Prisma.SeasonUpdateWithoutRacesInput, Prisma.SeasonUncheckedUpdateWithoutRacesInput>
  create: Prisma.XOR<Prisma.SeasonCreateWithoutRacesInput, Prisma.SeasonUncheckedCreateWithoutRacesInput>
  where?: Prisma.SeasonWhereInput
}

export type SeasonUpdateToOneWithWhereWithoutRacesInput = {
  where?: Prisma.SeasonWhereInput
  data: Prisma.XOR<Prisma.SeasonUpdateWithoutRacesInput, Prisma.SeasonUncheckedUpdateWithoutRacesInput>
}

export type SeasonUpdateWithoutRacesInput = {
  year?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  champion?: Prisma.DriverUpdateOneRequiredWithoutChampionshipsNestedInput
}

export type SeasonUncheckedUpdateWithoutRacesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  year?: Prisma.IntFieldUpdateOperationsInput | number
  championId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SeasonCreateWithoutChampionInput = {
  year: number
  createdAt?: Date | string
  updatedAt?: Date | string
  races?: Prisma.RaceCreateNestedManyWithoutSeasonInput
}

export type SeasonUncheckedCreateWithoutChampionInput = {
  id?: number
  year: number
  createdAt?: Date | string
  updatedAt?: Date | string
  races?: Prisma.RaceUncheckedCreateNestedManyWithoutSeasonInput
}

export type SeasonCreateOrConnectWithoutChampionInput = {
  where: Prisma.SeasonWhereUniqueInput
  create: Prisma.XOR<Prisma.SeasonCreateWithoutChampionInput, Prisma.SeasonUncheckedCreateWithoutChampionInput>
}

export type SeasonCreateManyChampionInputEnvelope = {
  data: Prisma.SeasonCreateManyChampionInput | Prisma.SeasonCreateManyChampionInput[]
  skipDuplicates?: boolean
}

export type SeasonUpsertWithWhereUniqueWithoutChampionInput = {
  where: Prisma.SeasonWhereUniqueInput
  update: Prisma.XOR<Prisma.SeasonUpdateWithoutChampionInput, Prisma.SeasonUncheckedUpdateWithoutChampionInput>
  create: Prisma.XOR<Prisma.SeasonCreateWithoutChampionInput, Prisma.SeasonUncheckedCreateWithoutChampionInput>
}

export type SeasonUpdateWithWhereUniqueWithoutChampionInput = {
  where: Prisma.SeasonWhereUniqueInput
  data: Prisma.XOR<Prisma.SeasonUpdateWithoutChampionInput, Prisma.SeasonUncheckedUpdateWithoutChampionInput>
}

export type SeasonUpdateManyWithWhereWithoutChampionInput = {
  where: Prisma.SeasonScalarWhereInput
  data: Prisma.XOR<Prisma.SeasonUpdateManyMutationInput, Prisma.SeasonUncheckedUpdateManyWithoutChampionInput>
}

export type SeasonScalarWhereInput = {
  AND?: Prisma.SeasonScalarWhereInput | Prisma.SeasonScalarWhereInput[]
  OR?: Prisma.SeasonScalarWhereInput[]
  NOT?: Prisma.SeasonScalarWhereInput | Prisma.SeasonScalarWhereInput[]
  id?: Prisma.IntFilter<"Season"> | number
  year?: Prisma.IntFilter<"Season"> | number
  championId?: Prisma.StringFilter<"Season"> | string
  createdAt?: Prisma.DateTimeFilter<"Season"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Season"> | Date | string
}

export type SeasonCreateManyChampionInput = {
  id?: number
  year: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SeasonUpdateWithoutChampionInput = {
  year?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  races?: Prisma.RaceUpdateManyWithoutSeasonNestedInput
}

export type SeasonUncheckedUpdateWithoutChampionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  year?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  races?: Prisma.RaceUncheckedUpdateManyWithoutSeasonNestedInput
}

export type SeasonUncheckedUpdateManyWithoutChampionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  year?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SeasonCountOutputType
 */

export type SeasonCountOutputType = {
  races: number
}

export type SeasonCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  races?: boolean | SeasonCountOutputTypeCountRacesArgs
}

/**
 * SeasonCountOutputType without action
 */
export type SeasonCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SeasonCountOutputType
   */
  select?: Prisma.SeasonCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SeasonCountOutputType without action
 */
export type SeasonCountOutputTypeCountRacesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RaceWhereInput
}


export type SeasonSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  championId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  champion?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
  races?: boolean | Prisma.Season$racesArgs<ExtArgs>
  _count?: boolean | Prisma.SeasonCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["season"]>

export type SeasonSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  championId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  champion?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
}, ExtArgs["result"]["season"]>

export type SeasonSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  championId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  champion?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
}, ExtArgs["result"]["season"]>

export type SeasonSelectScalar = {
  id?: boolean
  year?: boolean
  championId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SeasonOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "year" | "championId" | "createdAt" | "updatedAt", ExtArgs["result"]["season"]>
export type SeasonInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  champion?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
  races?: boolean | Prisma.Season$racesArgs<ExtArgs>
  _count?: boolean | Prisma.SeasonCountOutputTypeDefaultArgs<ExtArgs>
}
export type SeasonIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  champion?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
}
export type SeasonIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  champion?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
}

export type $SeasonPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Season"
  objects: {
    champion: Prisma.$DriverPayload<ExtArgs>
    races: Prisma.$RacePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    year: number
    championId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["season"]>
  composites: {}
}

export type SeasonGetPayload<S extends boolean | null | undefined | SeasonDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SeasonPayload, S>

export type SeasonCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SeasonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SeasonCountAggregateInputType | true
  }

export interface SeasonDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Season'], meta: { name: 'Season' } }
  /**
   * Find zero or one Season that matches the filter.
   * @param {SeasonFindUniqueArgs} args - Arguments to find a Season
   * @example
   * // Get one Season
   * const season = await prisma.season.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SeasonFindUniqueArgs>(args: Prisma.SelectSubset<T, SeasonFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Season that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SeasonFindUniqueOrThrowArgs} args - Arguments to find a Season
   * @example
   * // Get one Season
   * const season = await prisma.season.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SeasonFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SeasonFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Season that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SeasonFindFirstArgs} args - Arguments to find a Season
   * @example
   * // Get one Season
   * const season = await prisma.season.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SeasonFindFirstArgs>(args?: Prisma.SelectSubset<T, SeasonFindFirstArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Season that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SeasonFindFirstOrThrowArgs} args - Arguments to find a Season
   * @example
   * // Get one Season
   * const season = await prisma.season.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SeasonFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SeasonFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Seasons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SeasonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Seasons
   * const seasons = await prisma.season.findMany()
   * 
   * // Get first 10 Seasons
   * const seasons = await prisma.season.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const seasonWithIdOnly = await prisma.season.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SeasonFindManyArgs>(args?: Prisma.SelectSubset<T, SeasonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Season.
   * @param {SeasonCreateArgs} args - Arguments to create a Season.
   * @example
   * // Create one Season
   * const Season = await prisma.season.create({
   *   data: {
   *     // ... data to create a Season
   *   }
   * })
   * 
   */
  create<T extends SeasonCreateArgs>(args: Prisma.SelectSubset<T, SeasonCreateArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Seasons.
   * @param {SeasonCreateManyArgs} args - Arguments to create many Seasons.
   * @example
   * // Create many Seasons
   * const season = await prisma.season.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SeasonCreateManyArgs>(args?: Prisma.SelectSubset<T, SeasonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Seasons and returns the data saved in the database.
   * @param {SeasonCreateManyAndReturnArgs} args - Arguments to create many Seasons.
   * @example
   * // Create many Seasons
   * const season = await prisma.season.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Seasons and only return the `id`
   * const seasonWithIdOnly = await prisma.season.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SeasonCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SeasonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Season.
   * @param {SeasonDeleteArgs} args - Arguments to delete one Season.
   * @example
   * // Delete one Season
   * const Season = await prisma.season.delete({
   *   where: {
   *     // ... filter to delete one Season
   *   }
   * })
   * 
   */
  delete<T extends SeasonDeleteArgs>(args: Prisma.SelectSubset<T, SeasonDeleteArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Season.
   * @param {SeasonUpdateArgs} args - Arguments to update one Season.
   * @example
   * // Update one Season
   * const season = await prisma.season.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SeasonUpdateArgs>(args: Prisma.SelectSubset<T, SeasonUpdateArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Seasons.
   * @param {SeasonDeleteManyArgs} args - Arguments to filter Seasons to delete.
   * @example
   * // Delete a few Seasons
   * const { count } = await prisma.season.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SeasonDeleteManyArgs>(args?: Prisma.SelectSubset<T, SeasonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Seasons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SeasonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Seasons
   * const season = await prisma.season.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SeasonUpdateManyArgs>(args: Prisma.SelectSubset<T, SeasonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Seasons and returns the data updated in the database.
   * @param {SeasonUpdateManyAndReturnArgs} args - Arguments to update many Seasons.
   * @example
   * // Update many Seasons
   * const season = await prisma.season.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Seasons and only return the `id`
   * const seasonWithIdOnly = await prisma.season.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SeasonUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SeasonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Season.
   * @param {SeasonUpsertArgs} args - Arguments to update or create a Season.
   * @example
   * // Update or create a Season
   * const season = await prisma.season.upsert({
   *   create: {
   *     // ... data to create a Season
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Season we want to update
   *   }
   * })
   */
  upsert<T extends SeasonUpsertArgs>(args: Prisma.SelectSubset<T, SeasonUpsertArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Seasons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SeasonCountArgs} args - Arguments to filter Seasons to count.
   * @example
   * // Count the number of Seasons
   * const count = await prisma.season.count({
   *   where: {
   *     // ... the filter for the Seasons we want to count
   *   }
   * })
  **/
  count<T extends SeasonCountArgs>(
    args?: Prisma.Subset<T, SeasonCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SeasonCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Season.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SeasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SeasonAggregateArgs>(args: Prisma.Subset<T, SeasonAggregateArgs>): Prisma.PrismaPromise<GetSeasonAggregateType<T>>

  /**
   * Group by Season.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SeasonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SeasonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SeasonGroupByArgs['orderBy'] }
      : { orderBy?: SeasonGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SeasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Season model
 */
readonly fields: SeasonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Season.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SeasonClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  champion<T extends Prisma.DriverDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DriverDefaultArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  races<T extends Prisma.Season$racesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Season$racesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Season model
 */
export interface SeasonFieldRefs {
  readonly id: Prisma.FieldRef<"Season", 'Int'>
  readonly year: Prisma.FieldRef<"Season", 'Int'>
  readonly championId: Prisma.FieldRef<"Season", 'String'>
  readonly createdAt: Prisma.FieldRef<"Season", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Season", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Season findUnique
 */
export type SeasonFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * Filter, which Season to fetch.
   */
  where: Prisma.SeasonWhereUniqueInput
}

/**
 * Season findUniqueOrThrow
 */
export type SeasonFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * Filter, which Season to fetch.
   */
  where: Prisma.SeasonWhereUniqueInput
}

/**
 * Season findFirst
 */
export type SeasonFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * Filter, which Season to fetch.
   */
  where?: Prisma.SeasonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Seasons to fetch.
   */
  orderBy?: Prisma.SeasonOrderByWithRelationInput | Prisma.SeasonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Seasons.
   */
  cursor?: Prisma.SeasonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Seasons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Seasons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Seasons.
   */
  distinct?: Prisma.SeasonScalarFieldEnum | Prisma.SeasonScalarFieldEnum[]
}

/**
 * Season findFirstOrThrow
 */
export type SeasonFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * Filter, which Season to fetch.
   */
  where?: Prisma.SeasonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Seasons to fetch.
   */
  orderBy?: Prisma.SeasonOrderByWithRelationInput | Prisma.SeasonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Seasons.
   */
  cursor?: Prisma.SeasonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Seasons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Seasons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Seasons.
   */
  distinct?: Prisma.SeasonScalarFieldEnum | Prisma.SeasonScalarFieldEnum[]
}

/**
 * Season findMany
 */
export type SeasonFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * Filter, which Seasons to fetch.
   */
  where?: Prisma.SeasonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Seasons to fetch.
   */
  orderBy?: Prisma.SeasonOrderByWithRelationInput | Prisma.SeasonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Seasons.
   */
  cursor?: Prisma.SeasonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Seasons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Seasons.
   */
  skip?: number
  distinct?: Prisma.SeasonScalarFieldEnum | Prisma.SeasonScalarFieldEnum[]
}

/**
 * Season create
 */
export type SeasonCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * The data needed to create a Season.
   */
  data: Prisma.XOR<Prisma.SeasonCreateInput, Prisma.SeasonUncheckedCreateInput>
}

/**
 * Season createMany
 */
export type SeasonCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Seasons.
   */
  data: Prisma.SeasonCreateManyInput | Prisma.SeasonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Season createManyAndReturn
 */
export type SeasonCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * The data used to create many Seasons.
   */
  data: Prisma.SeasonCreateManyInput | Prisma.SeasonCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Season update
 */
export type SeasonUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * The data needed to update a Season.
   */
  data: Prisma.XOR<Prisma.SeasonUpdateInput, Prisma.SeasonUncheckedUpdateInput>
  /**
   * Choose, which Season to update.
   */
  where: Prisma.SeasonWhereUniqueInput
}

/**
 * Season updateMany
 */
export type SeasonUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Seasons.
   */
  data: Prisma.XOR<Prisma.SeasonUpdateManyMutationInput, Prisma.SeasonUncheckedUpdateManyInput>
  /**
   * Filter which Seasons to update
   */
  where?: Prisma.SeasonWhereInput
  /**
   * Limit how many Seasons to update.
   */
  limit?: number
}

/**
 * Season updateManyAndReturn
 */
export type SeasonUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * The data used to update Seasons.
   */
  data: Prisma.XOR<Prisma.SeasonUpdateManyMutationInput, Prisma.SeasonUncheckedUpdateManyInput>
  /**
   * Filter which Seasons to update
   */
  where?: Prisma.SeasonWhereInput
  /**
   * Limit how many Seasons to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Season upsert
 */
export type SeasonUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * The filter to search for the Season to update in case it exists.
   */
  where: Prisma.SeasonWhereUniqueInput
  /**
   * In case the Season found by the `where` argument doesn't exist, create a new Season with this data.
   */
  create: Prisma.XOR<Prisma.SeasonCreateInput, Prisma.SeasonUncheckedCreateInput>
  /**
   * In case the Season was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SeasonUpdateInput, Prisma.SeasonUncheckedUpdateInput>
}

/**
 * Season delete
 */
export type SeasonDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  /**
   * Filter which Season to delete.
   */
  where: Prisma.SeasonWhereUniqueInput
}

/**
 * Season deleteMany
 */
export type SeasonDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Seasons to delete
   */
  where?: Prisma.SeasonWhereInput
  /**
   * Limit how many Seasons to delete.
   */
  limit?: number
}

/**
 * Season.races
 */
export type Season$racesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  where?: Prisma.RaceWhereInput
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  cursor?: Prisma.RaceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RaceScalarFieldEnum | Prisma.RaceScalarFieldEnum[]
}

/**
 * Season without action
 */
export type SeasonDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
}
