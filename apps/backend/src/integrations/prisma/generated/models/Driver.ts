
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Driver` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Driver
 * 
 */
export type DriverModel = runtime.Types.Result.DefaultSelection<Prisma.$DriverPayload>

export type AggregateDriver = {
  _count: DriverCountAggregateOutputType | null
  _min: DriverMinAggregateOutputType | null
  _max: DriverMaxAggregateOutputType | null
}

export type DriverMinAggregateOutputType = {
  driverId: string | null
  fullName: string | null
  code: string | null
  nationality: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DriverMaxAggregateOutputType = {
  driverId: string | null
  fullName: string | null
  code: string | null
  nationality: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DriverCountAggregateOutputType = {
  driverId: number
  fullName: number
  code: number
  nationality: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DriverMinAggregateInputType = {
  driverId?: true
  fullName?: true
  code?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
}

export type DriverMaxAggregateInputType = {
  driverId?: true
  fullName?: true
  code?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
}

export type DriverCountAggregateInputType = {
  driverId?: true
  fullName?: true
  code?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DriverAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Driver to aggregate.
   */
  where?: Prisma.DriverWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Drivers to fetch.
   */
  orderBy?: Prisma.DriverOrderByWithRelationInput | Prisma.DriverOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DriverWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Drivers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Drivers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Drivers
  **/
  _count?: true | DriverCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DriverMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DriverMaxAggregateInputType
}

export type GetDriverAggregateType<T extends DriverAggregateArgs> = {
      [P in keyof T & keyof AggregateDriver]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDriver[P]>
    : Prisma.GetScalarType<T[P], AggregateDriver[P]>
}




export type DriverGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DriverWhereInput
  orderBy?: Prisma.DriverOrderByWithAggregationInput | Prisma.DriverOrderByWithAggregationInput[]
  by: Prisma.DriverScalarFieldEnum[] | Prisma.DriverScalarFieldEnum
  having?: Prisma.DriverScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DriverCountAggregateInputType | true
  _min?: DriverMinAggregateInputType
  _max?: DriverMaxAggregateInputType
}

export type DriverGroupByOutputType = {
  driverId: string
  fullName: string
  code: string
  nationality: string
  createdAt: Date
  updatedAt: Date
  _count: DriverCountAggregateOutputType | null
  _min: DriverMinAggregateOutputType | null
  _max: DriverMaxAggregateOutputType | null
}

type GetDriverGroupByPayload<T extends DriverGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DriverGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DriverGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DriverGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DriverGroupByOutputType[P]>
      }
    >
  > 



export type DriverWhereInput = {
  AND?: Prisma.DriverWhereInput | Prisma.DriverWhereInput[]
  OR?: Prisma.DriverWhereInput[]
  NOT?: Prisma.DriverWhereInput | Prisma.DriverWhereInput[]
  driverId?: Prisma.StringFilter<"Driver"> | string
  fullName?: Prisma.StringFilter<"Driver"> | string
  code?: Prisma.StringFilter<"Driver"> | string
  nationality?: Prisma.StringFilter<"Driver"> | string
  createdAt?: Prisma.DateTimeFilter<"Driver"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Driver"> | Date | string
  racesWon?: Prisma.RaceListRelationFilter
  championships?: Prisma.SeasonListRelationFilter
}

export type DriverOrderByWithRelationInput = {
  driverId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  code?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  racesWon?: Prisma.RaceOrderByRelationAggregateInput
  championships?: Prisma.SeasonOrderByRelationAggregateInput
}

export type DriverWhereUniqueInput = Prisma.AtLeast<{
  driverId?: string
  AND?: Prisma.DriverWhereInput | Prisma.DriverWhereInput[]
  OR?: Prisma.DriverWhereInput[]
  NOT?: Prisma.DriverWhereInput | Prisma.DriverWhereInput[]
  fullName?: Prisma.StringFilter<"Driver"> | string
  code?: Prisma.StringFilter<"Driver"> | string
  nationality?: Prisma.StringFilter<"Driver"> | string
  createdAt?: Prisma.DateTimeFilter<"Driver"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Driver"> | Date | string
  racesWon?: Prisma.RaceListRelationFilter
  championships?: Prisma.SeasonListRelationFilter
}, "driverId">

export type DriverOrderByWithAggregationInput = {
  driverId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  code?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DriverCountOrderByAggregateInput
  _max?: Prisma.DriverMaxOrderByAggregateInput
  _min?: Prisma.DriverMinOrderByAggregateInput
}

export type DriverScalarWhereWithAggregatesInput = {
  AND?: Prisma.DriverScalarWhereWithAggregatesInput | Prisma.DriverScalarWhereWithAggregatesInput[]
  OR?: Prisma.DriverScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DriverScalarWhereWithAggregatesInput | Prisma.DriverScalarWhereWithAggregatesInput[]
  driverId?: Prisma.StringWithAggregatesFilter<"Driver"> | string
  fullName?: Prisma.StringWithAggregatesFilter<"Driver"> | string
  code?: Prisma.StringWithAggregatesFilter<"Driver"> | string
  nationality?: Prisma.StringWithAggregatesFilter<"Driver"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Driver"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Driver"> | Date | string
}

export type DriverCreateInput = {
  driverId: string
  fullName: string
  code: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  racesWon?: Prisma.RaceCreateNestedManyWithoutWinnerInput
  championships?: Prisma.SeasonCreateNestedManyWithoutChampionInput
}

export type DriverUncheckedCreateInput = {
  driverId: string
  fullName: string
  code: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  racesWon?: Prisma.RaceUncheckedCreateNestedManyWithoutWinnerInput
  championships?: Prisma.SeasonUncheckedCreateNestedManyWithoutChampionInput
}

export type DriverUpdateInput = {
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  racesWon?: Prisma.RaceUpdateManyWithoutWinnerNestedInput
  championships?: Prisma.SeasonUpdateManyWithoutChampionNestedInput
}

export type DriverUncheckedUpdateInput = {
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  racesWon?: Prisma.RaceUncheckedUpdateManyWithoutWinnerNestedInput
  championships?: Prisma.SeasonUncheckedUpdateManyWithoutChampionNestedInput
}

export type DriverCreateManyInput = {
  driverId: string
  fullName: string
  code: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DriverUpdateManyMutationInput = {
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DriverUncheckedUpdateManyInput = {
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DriverScalarRelationFilter = {
  is?: Prisma.DriverWhereInput
  isNot?: Prisma.DriverWhereInput
}

export type DriverCountOrderByAggregateInput = {
  driverId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  code?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DriverMaxOrderByAggregateInput = {
  driverId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  code?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DriverMinOrderByAggregateInput = {
  driverId?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  code?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DriverCreateNestedOneWithoutChampionshipsInput = {
  create?: Prisma.XOR<Prisma.DriverCreateWithoutChampionshipsInput, Prisma.DriverUncheckedCreateWithoutChampionshipsInput>
  connectOrCreate?: Prisma.DriverCreateOrConnectWithoutChampionshipsInput
  connect?: Prisma.DriverWhereUniqueInput
}

export type DriverUpdateOneRequiredWithoutChampionshipsNestedInput = {
  create?: Prisma.XOR<Prisma.DriverCreateWithoutChampionshipsInput, Prisma.DriverUncheckedCreateWithoutChampionshipsInput>
  connectOrCreate?: Prisma.DriverCreateOrConnectWithoutChampionshipsInput
  upsert?: Prisma.DriverUpsertWithoutChampionshipsInput
  connect?: Prisma.DriverWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DriverUpdateToOneWithWhereWithoutChampionshipsInput, Prisma.DriverUpdateWithoutChampionshipsInput>, Prisma.DriverUncheckedUpdateWithoutChampionshipsInput>
}

export type DriverCreateNestedOneWithoutRacesWonInput = {
  create?: Prisma.XOR<Prisma.DriverCreateWithoutRacesWonInput, Prisma.DriverUncheckedCreateWithoutRacesWonInput>
  connectOrCreate?: Prisma.DriverCreateOrConnectWithoutRacesWonInput
  connect?: Prisma.DriverWhereUniqueInput
}

export type DriverUpdateOneRequiredWithoutRacesWonNestedInput = {
  create?: Prisma.XOR<Prisma.DriverCreateWithoutRacesWonInput, Prisma.DriverUncheckedCreateWithoutRacesWonInput>
  connectOrCreate?: Prisma.DriverCreateOrConnectWithoutRacesWonInput
  upsert?: Prisma.DriverUpsertWithoutRacesWonInput
  connect?: Prisma.DriverWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DriverUpdateToOneWithWhereWithoutRacesWonInput, Prisma.DriverUpdateWithoutRacesWonInput>, Prisma.DriverUncheckedUpdateWithoutRacesWonInput>
}

export type DriverCreateWithoutChampionshipsInput = {
  driverId: string
  fullName: string
  code: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  racesWon?: Prisma.RaceCreateNestedManyWithoutWinnerInput
}

export type DriverUncheckedCreateWithoutChampionshipsInput = {
  driverId: string
  fullName: string
  code: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  racesWon?: Prisma.RaceUncheckedCreateNestedManyWithoutWinnerInput
}

export type DriverCreateOrConnectWithoutChampionshipsInput = {
  where: Prisma.DriverWhereUniqueInput
  create: Prisma.XOR<Prisma.DriverCreateWithoutChampionshipsInput, Prisma.DriverUncheckedCreateWithoutChampionshipsInput>
}

export type DriverUpsertWithoutChampionshipsInput = {
  update: Prisma.XOR<Prisma.DriverUpdateWithoutChampionshipsInput, Prisma.DriverUncheckedUpdateWithoutChampionshipsInput>
  create: Prisma.XOR<Prisma.DriverCreateWithoutChampionshipsInput, Prisma.DriverUncheckedCreateWithoutChampionshipsInput>
  where?: Prisma.DriverWhereInput
}

export type DriverUpdateToOneWithWhereWithoutChampionshipsInput = {
  where?: Prisma.DriverWhereInput
  data: Prisma.XOR<Prisma.DriverUpdateWithoutChampionshipsInput, Prisma.DriverUncheckedUpdateWithoutChampionshipsInput>
}

export type DriverUpdateWithoutChampionshipsInput = {
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  racesWon?: Prisma.RaceUpdateManyWithoutWinnerNestedInput
}

export type DriverUncheckedUpdateWithoutChampionshipsInput = {
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  racesWon?: Prisma.RaceUncheckedUpdateManyWithoutWinnerNestedInput
}

export type DriverCreateWithoutRacesWonInput = {
  driverId: string
  fullName: string
  code: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  championships?: Prisma.SeasonCreateNestedManyWithoutChampionInput
}

export type DriverUncheckedCreateWithoutRacesWonInput = {
  driverId: string
  fullName: string
  code: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  championships?: Prisma.SeasonUncheckedCreateNestedManyWithoutChampionInput
}

export type DriverCreateOrConnectWithoutRacesWonInput = {
  where: Prisma.DriverWhereUniqueInput
  create: Prisma.XOR<Prisma.DriverCreateWithoutRacesWonInput, Prisma.DriverUncheckedCreateWithoutRacesWonInput>
}

export type DriverUpsertWithoutRacesWonInput = {
  update: Prisma.XOR<Prisma.DriverUpdateWithoutRacesWonInput, Prisma.DriverUncheckedUpdateWithoutRacesWonInput>
  create: Prisma.XOR<Prisma.DriverCreateWithoutRacesWonInput, Prisma.DriverUncheckedCreateWithoutRacesWonInput>
  where?: Prisma.DriverWhereInput
}

export type DriverUpdateToOneWithWhereWithoutRacesWonInput = {
  where?: Prisma.DriverWhereInput
  data: Prisma.XOR<Prisma.DriverUpdateWithoutRacesWonInput, Prisma.DriverUncheckedUpdateWithoutRacesWonInput>
}

export type DriverUpdateWithoutRacesWonInput = {
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  championships?: Prisma.SeasonUpdateManyWithoutChampionNestedInput
}

export type DriverUncheckedUpdateWithoutRacesWonInput = {
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  championships?: Prisma.SeasonUncheckedUpdateManyWithoutChampionNestedInput
}


/**
 * Count Type DriverCountOutputType
 */

export type DriverCountOutputType = {
  racesWon: number
  championships: number
}

export type DriverCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  racesWon?: boolean | DriverCountOutputTypeCountRacesWonArgs
  championships?: boolean | DriverCountOutputTypeCountChampionshipsArgs
}

/**
 * DriverCountOutputType without action
 */
export type DriverCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DriverCountOutputType
   */
  select?: Prisma.DriverCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DriverCountOutputType without action
 */
export type DriverCountOutputTypeCountRacesWonArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RaceWhereInput
}

/**
 * DriverCountOutputType without action
 */
export type DriverCountOutputTypeCountChampionshipsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SeasonWhereInput
}


export type DriverSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  driverId?: boolean
  fullName?: boolean
  code?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  racesWon?: boolean | Prisma.Driver$racesWonArgs<ExtArgs>
  championships?: boolean | Prisma.Driver$championshipsArgs<ExtArgs>
  _count?: boolean | Prisma.DriverCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["driver"]>

export type DriverSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  driverId?: boolean
  fullName?: boolean
  code?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["driver"]>

export type DriverSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  driverId?: boolean
  fullName?: boolean
  code?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["driver"]>

export type DriverSelectScalar = {
  driverId?: boolean
  fullName?: boolean
  code?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DriverOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"driverId" | "fullName" | "code" | "nationality" | "createdAt" | "updatedAt", ExtArgs["result"]["driver"]>
export type DriverInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  racesWon?: boolean | Prisma.Driver$racesWonArgs<ExtArgs>
  championships?: boolean | Prisma.Driver$championshipsArgs<ExtArgs>
  _count?: boolean | Prisma.DriverCountOutputTypeDefaultArgs<ExtArgs>
}
export type DriverIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DriverIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DriverPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Driver"
  objects: {
    racesWon: Prisma.$RacePayload<ExtArgs>[]
    championships: Prisma.$SeasonPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    driverId: string
    fullName: string
    code: string
    nationality: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["driver"]>
  composites: {}
}

export type DriverGetPayload<S extends boolean | null | undefined | DriverDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DriverPayload, S>

export type DriverCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DriverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DriverCountAggregateInputType | true
  }

export interface DriverDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Driver'], meta: { name: 'Driver' } }
  /**
   * Find zero or one Driver that matches the filter.
   * @param {DriverFindUniqueArgs} args - Arguments to find a Driver
   * @example
   * // Get one Driver
   * const driver = await prisma.driver.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DriverFindUniqueArgs>(args: Prisma.SelectSubset<T, DriverFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Driver that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DriverFindUniqueOrThrowArgs} args - Arguments to find a Driver
   * @example
   * // Get one Driver
   * const driver = await prisma.driver.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DriverFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DriverFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Driver that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DriverFindFirstArgs} args - Arguments to find a Driver
   * @example
   * // Get one Driver
   * const driver = await prisma.driver.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DriverFindFirstArgs>(args?: Prisma.SelectSubset<T, DriverFindFirstArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Driver that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DriverFindFirstOrThrowArgs} args - Arguments to find a Driver
   * @example
   * // Get one Driver
   * const driver = await prisma.driver.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DriverFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DriverFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Drivers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DriverFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Drivers
   * const drivers = await prisma.driver.findMany()
   * 
   * // Get first 10 Drivers
   * const drivers = await prisma.driver.findMany({ take: 10 })
   * 
   * // Only select the `driverId`
   * const driverWithDriverIdOnly = await prisma.driver.findMany({ select: { driverId: true } })
   * 
   */
  findMany<T extends DriverFindManyArgs>(args?: Prisma.SelectSubset<T, DriverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Driver.
   * @param {DriverCreateArgs} args - Arguments to create a Driver.
   * @example
   * // Create one Driver
   * const Driver = await prisma.driver.create({
   *   data: {
   *     // ... data to create a Driver
   *   }
   * })
   * 
   */
  create<T extends DriverCreateArgs>(args: Prisma.SelectSubset<T, DriverCreateArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Drivers.
   * @param {DriverCreateManyArgs} args - Arguments to create many Drivers.
   * @example
   * // Create many Drivers
   * const driver = await prisma.driver.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DriverCreateManyArgs>(args?: Prisma.SelectSubset<T, DriverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Drivers and returns the data saved in the database.
   * @param {DriverCreateManyAndReturnArgs} args - Arguments to create many Drivers.
   * @example
   * // Create many Drivers
   * const driver = await prisma.driver.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Drivers and only return the `driverId`
   * const driverWithDriverIdOnly = await prisma.driver.createManyAndReturn({
   *   select: { driverId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DriverCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DriverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Driver.
   * @param {DriverDeleteArgs} args - Arguments to delete one Driver.
   * @example
   * // Delete one Driver
   * const Driver = await prisma.driver.delete({
   *   where: {
   *     // ... filter to delete one Driver
   *   }
   * })
   * 
   */
  delete<T extends DriverDeleteArgs>(args: Prisma.SelectSubset<T, DriverDeleteArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Driver.
   * @param {DriverUpdateArgs} args - Arguments to update one Driver.
   * @example
   * // Update one Driver
   * const driver = await prisma.driver.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DriverUpdateArgs>(args: Prisma.SelectSubset<T, DriverUpdateArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Drivers.
   * @param {DriverDeleteManyArgs} args - Arguments to filter Drivers to delete.
   * @example
   * // Delete a few Drivers
   * const { count } = await prisma.driver.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DriverDeleteManyArgs>(args?: Prisma.SelectSubset<T, DriverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Drivers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DriverUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Drivers
   * const driver = await prisma.driver.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DriverUpdateManyArgs>(args: Prisma.SelectSubset<T, DriverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Drivers and returns the data updated in the database.
   * @param {DriverUpdateManyAndReturnArgs} args - Arguments to update many Drivers.
   * @example
   * // Update many Drivers
   * const driver = await prisma.driver.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Drivers and only return the `driverId`
   * const driverWithDriverIdOnly = await prisma.driver.updateManyAndReturn({
   *   select: { driverId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DriverUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DriverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Driver.
   * @param {DriverUpsertArgs} args - Arguments to update or create a Driver.
   * @example
   * // Update or create a Driver
   * const driver = await prisma.driver.upsert({
   *   create: {
   *     // ... data to create a Driver
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Driver we want to update
   *   }
   * })
   */
  upsert<T extends DriverUpsertArgs>(args: Prisma.SelectSubset<T, DriverUpsertArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Drivers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DriverCountArgs} args - Arguments to filter Drivers to count.
   * @example
   * // Count the number of Drivers
   * const count = await prisma.driver.count({
   *   where: {
   *     // ... the filter for the Drivers we want to count
   *   }
   * })
  **/
  count<T extends DriverCountArgs>(
    args?: Prisma.Subset<T, DriverCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DriverCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Driver.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DriverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DriverAggregateArgs>(args: Prisma.Subset<T, DriverAggregateArgs>): Prisma.PrismaPromise<GetDriverAggregateType<T>>

  /**
   * Group by Driver.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DriverGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DriverGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DriverGroupByArgs['orderBy'] }
      : { orderBy?: DriverGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DriverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDriverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Driver model
 */
readonly fields: DriverFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Driver.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DriverClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  racesWon<T extends Prisma.Driver$racesWonArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Driver$racesWonArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  championships<T extends Prisma.Driver$championshipsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Driver$championshipsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Driver model
 */
export interface DriverFieldRefs {
  readonly driverId: Prisma.FieldRef<"Driver", 'String'>
  readonly fullName: Prisma.FieldRef<"Driver", 'String'>
  readonly code: Prisma.FieldRef<"Driver", 'String'>
  readonly nationality: Prisma.FieldRef<"Driver", 'String'>
  readonly createdAt: Prisma.FieldRef<"Driver", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Driver", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Driver findUnique
 */
export type DriverFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * Filter, which Driver to fetch.
   */
  where: Prisma.DriverWhereUniqueInput
}

/**
 * Driver findUniqueOrThrow
 */
export type DriverFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * Filter, which Driver to fetch.
   */
  where: Prisma.DriverWhereUniqueInput
}

/**
 * Driver findFirst
 */
export type DriverFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * Filter, which Driver to fetch.
   */
  where?: Prisma.DriverWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Drivers to fetch.
   */
  orderBy?: Prisma.DriverOrderByWithRelationInput | Prisma.DriverOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Drivers.
   */
  cursor?: Prisma.DriverWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Drivers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Drivers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Drivers.
   */
  distinct?: Prisma.DriverScalarFieldEnum | Prisma.DriverScalarFieldEnum[]
}

/**
 * Driver findFirstOrThrow
 */
export type DriverFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * Filter, which Driver to fetch.
   */
  where?: Prisma.DriverWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Drivers to fetch.
   */
  orderBy?: Prisma.DriverOrderByWithRelationInput | Prisma.DriverOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Drivers.
   */
  cursor?: Prisma.DriverWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Drivers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Drivers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Drivers.
   */
  distinct?: Prisma.DriverScalarFieldEnum | Prisma.DriverScalarFieldEnum[]
}

/**
 * Driver findMany
 */
export type DriverFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * Filter, which Drivers to fetch.
   */
  where?: Prisma.DriverWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Drivers to fetch.
   */
  orderBy?: Prisma.DriverOrderByWithRelationInput | Prisma.DriverOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Drivers.
   */
  cursor?: Prisma.DriverWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Drivers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Drivers.
   */
  skip?: number
  distinct?: Prisma.DriverScalarFieldEnum | Prisma.DriverScalarFieldEnum[]
}

/**
 * Driver create
 */
export type DriverCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * The data needed to create a Driver.
   */
  data: Prisma.XOR<Prisma.DriverCreateInput, Prisma.DriverUncheckedCreateInput>
}

/**
 * Driver createMany
 */
export type DriverCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Drivers.
   */
  data: Prisma.DriverCreateManyInput | Prisma.DriverCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Driver createManyAndReturn
 */
export type DriverCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * The data used to create many Drivers.
   */
  data: Prisma.DriverCreateManyInput | Prisma.DriverCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Driver update
 */
export type DriverUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * The data needed to update a Driver.
   */
  data: Prisma.XOR<Prisma.DriverUpdateInput, Prisma.DriverUncheckedUpdateInput>
  /**
   * Choose, which Driver to update.
   */
  where: Prisma.DriverWhereUniqueInput
}

/**
 * Driver updateMany
 */
export type DriverUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Drivers.
   */
  data: Prisma.XOR<Prisma.DriverUpdateManyMutationInput, Prisma.DriverUncheckedUpdateManyInput>
  /**
   * Filter which Drivers to update
   */
  where?: Prisma.DriverWhereInput
  /**
   * Limit how many Drivers to update.
   */
  limit?: number
}

/**
 * Driver updateManyAndReturn
 */
export type DriverUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * The data used to update Drivers.
   */
  data: Prisma.XOR<Prisma.DriverUpdateManyMutationInput, Prisma.DriverUncheckedUpdateManyInput>
  /**
   * Filter which Drivers to update
   */
  where?: Prisma.DriverWhereInput
  /**
   * Limit how many Drivers to update.
   */
  limit?: number
}

/**
 * Driver upsert
 */
export type DriverUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * The filter to search for the Driver to update in case it exists.
   */
  where: Prisma.DriverWhereUniqueInput
  /**
   * In case the Driver found by the `where` argument doesn't exist, create a new Driver with this data.
   */
  create: Prisma.XOR<Prisma.DriverCreateInput, Prisma.DriverUncheckedCreateInput>
  /**
   * In case the Driver was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DriverUpdateInput, Prisma.DriverUncheckedUpdateInput>
}

/**
 * Driver delete
 */
export type DriverDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
  /**
   * Filter which Driver to delete.
   */
  where: Prisma.DriverWhereUniqueInput
}

/**
 * Driver deleteMany
 */
export type DriverDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Drivers to delete
   */
  where?: Prisma.DriverWhereInput
  /**
   * Limit how many Drivers to delete.
   */
  limit?: number
}

/**
 * Driver.racesWon
 */
export type Driver$racesWonArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  where?: Prisma.RaceWhereInput
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  cursor?: Prisma.RaceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RaceScalarFieldEnum | Prisma.RaceScalarFieldEnum[]
}

/**
 * Driver.championships
 */
export type Driver$championshipsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  where?: Prisma.SeasonWhereInput
  orderBy?: Prisma.SeasonOrderByWithRelationInput | Prisma.SeasonOrderByWithRelationInput[]
  cursor?: Prisma.SeasonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SeasonScalarFieldEnum | Prisma.SeasonScalarFieldEnum[]
}

/**
 * Driver without action
 */
export type DriverDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Driver
   */
  select?: Prisma.DriverSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Driver
   */
  omit?: Prisma.DriverOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DriverInclude<ExtArgs> | null
}
