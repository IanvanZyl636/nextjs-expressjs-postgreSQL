
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Race` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Race
 * 
 */
export type RaceModel = runtime.Types.Result.DefaultSelection<Prisma.$RacePayload>

export type AggregateRace = {
  _count: RaceCountAggregateOutputType | null
  _avg: RaceAvgAggregateOutputType | null
  _sum: RaceSumAggregateOutputType | null
  _min: RaceMinAggregateOutputType | null
  _max: RaceMaxAggregateOutputType | null
}

export type RaceAvgAggregateOutputType = {
  id: number | null
  seasonId: number | null
  round: number | null
  points: number | null
  laps: number | null
}

export type RaceSumAggregateOutputType = {
  id: number | null
  seasonId: number | null
  round: number | null
  points: number | null
  laps: number | null
}

export type RaceMinAggregateOutputType = {
  id: number | null
  seasonId: number | null
  name: string | null
  round: number | null
  startedAt: Date | null
  points: number | null
  laps: number | null
  circuitId: string | null
  winnerId: string | null
  winnerConstructorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RaceMaxAggregateOutputType = {
  id: number | null
  seasonId: number | null
  name: string | null
  round: number | null
  startedAt: Date | null
  points: number | null
  laps: number | null
  circuitId: string | null
  winnerId: string | null
  winnerConstructorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RaceCountAggregateOutputType = {
  id: number
  seasonId: number
  name: number
  round: number
  startedAt: number
  points: number
  laps: number
  circuitId: number
  winnerId: number
  winnerConstructorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type RaceAvgAggregateInputType = {
  id?: true
  seasonId?: true
  round?: true
  points?: true
  laps?: true
}

export type RaceSumAggregateInputType = {
  id?: true
  seasonId?: true
  round?: true
  points?: true
  laps?: true
}

export type RaceMinAggregateInputType = {
  id?: true
  seasonId?: true
  name?: true
  round?: true
  startedAt?: true
  points?: true
  laps?: true
  circuitId?: true
  winnerId?: true
  winnerConstructorId?: true
  createdAt?: true
  updatedAt?: true
}

export type RaceMaxAggregateInputType = {
  id?: true
  seasonId?: true
  name?: true
  round?: true
  startedAt?: true
  points?: true
  laps?: true
  circuitId?: true
  winnerId?: true
  winnerConstructorId?: true
  createdAt?: true
  updatedAt?: true
}

export type RaceCountAggregateInputType = {
  id?: true
  seasonId?: true
  name?: true
  round?: true
  startedAt?: true
  points?: true
  laps?: true
  circuitId?: true
  winnerId?: true
  winnerConstructorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type RaceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Race to aggregate.
   */
  where?: Prisma.RaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Races to fetch.
   */
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Races from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Races.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Races
  **/
  _count?: true | RaceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RaceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RaceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RaceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RaceMaxAggregateInputType
}

export type GetRaceAggregateType<T extends RaceAggregateArgs> = {
      [P in keyof T & keyof AggregateRace]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRace[P]>
    : Prisma.GetScalarType<T[P], AggregateRace[P]>
}




export type RaceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RaceWhereInput
  orderBy?: Prisma.RaceOrderByWithAggregationInput | Prisma.RaceOrderByWithAggregationInput[]
  by: Prisma.RaceScalarFieldEnum[] | Prisma.RaceScalarFieldEnum
  having?: Prisma.RaceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RaceCountAggregateInputType | true
  _avg?: RaceAvgAggregateInputType
  _sum?: RaceSumAggregateInputType
  _min?: RaceMinAggregateInputType
  _max?: RaceMaxAggregateInputType
}

export type RaceGroupByOutputType = {
  id: number
  seasonId: number
  name: string
  round: number
  startedAt: Date
  points: number
  laps: number
  circuitId: string
  winnerId: string
  winnerConstructorId: string
  createdAt: Date
  updatedAt: Date
  _count: RaceCountAggregateOutputType | null
  _avg: RaceAvgAggregateOutputType | null
  _sum: RaceSumAggregateOutputType | null
  _min: RaceMinAggregateOutputType | null
  _max: RaceMaxAggregateOutputType | null
}

type GetRaceGroupByPayload<T extends RaceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RaceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RaceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RaceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RaceGroupByOutputType[P]>
      }
    >
  > 



export type RaceWhereInput = {
  AND?: Prisma.RaceWhereInput | Prisma.RaceWhereInput[]
  OR?: Prisma.RaceWhereInput[]
  NOT?: Prisma.RaceWhereInput | Prisma.RaceWhereInput[]
  id?: Prisma.IntFilter<"Race"> | number
  seasonId?: Prisma.IntFilter<"Race"> | number
  name?: Prisma.StringFilter<"Race"> | string
  round?: Prisma.IntFilter<"Race"> | number
  startedAt?: Prisma.DateTimeFilter<"Race"> | Date | string
  points?: Prisma.IntFilter<"Race"> | number
  laps?: Prisma.IntFilter<"Race"> | number
  circuitId?: Prisma.StringFilter<"Race"> | string
  winnerId?: Prisma.StringFilter<"Race"> | string
  winnerConstructorId?: Prisma.StringFilter<"Race"> | string
  createdAt?: Prisma.DateTimeFilter<"Race"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Race"> | Date | string
  circuit?: Prisma.XOR<Prisma.CircuitScalarRelationFilter, Prisma.CircuitWhereInput>
  winner?: Prisma.XOR<Prisma.DriverScalarRelationFilter, Prisma.DriverWhereInput>
  winnerConstructor?: Prisma.XOR<Prisma.ConstructorScalarRelationFilter, Prisma.ConstructorWhereInput>
  season?: Prisma.XOR<Prisma.SeasonScalarRelationFilter, Prisma.SeasonWhereInput>
}

export type RaceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  seasonId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  round?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  points?: Prisma.SortOrder
  laps?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winnerConstructorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  circuit?: Prisma.CircuitOrderByWithRelationInput
  winner?: Prisma.DriverOrderByWithRelationInput
  winnerConstructor?: Prisma.ConstructorOrderByWithRelationInput
  season?: Prisma.SeasonOrderByWithRelationInput
}

export type RaceWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  seasonId_round?: Prisma.RaceSeasonIdRoundCompoundUniqueInput
  AND?: Prisma.RaceWhereInput | Prisma.RaceWhereInput[]
  OR?: Prisma.RaceWhereInput[]
  NOT?: Prisma.RaceWhereInput | Prisma.RaceWhereInput[]
  seasonId?: Prisma.IntFilter<"Race"> | number
  name?: Prisma.StringFilter<"Race"> | string
  round?: Prisma.IntFilter<"Race"> | number
  startedAt?: Prisma.DateTimeFilter<"Race"> | Date | string
  points?: Prisma.IntFilter<"Race"> | number
  laps?: Prisma.IntFilter<"Race"> | number
  circuitId?: Prisma.StringFilter<"Race"> | string
  winnerId?: Prisma.StringFilter<"Race"> | string
  winnerConstructorId?: Prisma.StringFilter<"Race"> | string
  createdAt?: Prisma.DateTimeFilter<"Race"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Race"> | Date | string
  circuit?: Prisma.XOR<Prisma.CircuitScalarRelationFilter, Prisma.CircuitWhereInput>
  winner?: Prisma.XOR<Prisma.DriverScalarRelationFilter, Prisma.DriverWhereInput>
  winnerConstructor?: Prisma.XOR<Prisma.ConstructorScalarRelationFilter, Prisma.ConstructorWhereInput>
  season?: Prisma.XOR<Prisma.SeasonScalarRelationFilter, Prisma.SeasonWhereInput>
}, "id" | "seasonId_round">

export type RaceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  seasonId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  round?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  points?: Prisma.SortOrder
  laps?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winnerConstructorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.RaceCountOrderByAggregateInput
  _avg?: Prisma.RaceAvgOrderByAggregateInput
  _max?: Prisma.RaceMaxOrderByAggregateInput
  _min?: Prisma.RaceMinOrderByAggregateInput
  _sum?: Prisma.RaceSumOrderByAggregateInput
}

export type RaceScalarWhereWithAggregatesInput = {
  AND?: Prisma.RaceScalarWhereWithAggregatesInput | Prisma.RaceScalarWhereWithAggregatesInput[]
  OR?: Prisma.RaceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RaceScalarWhereWithAggregatesInput | Prisma.RaceScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Race"> | number
  seasonId?: Prisma.IntWithAggregatesFilter<"Race"> | number
  name?: Prisma.StringWithAggregatesFilter<"Race"> | string
  round?: Prisma.IntWithAggregatesFilter<"Race"> | number
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"Race"> | Date | string
  points?: Prisma.IntWithAggregatesFilter<"Race"> | number
  laps?: Prisma.IntWithAggregatesFilter<"Race"> | number
  circuitId?: Prisma.StringWithAggregatesFilter<"Race"> | string
  winnerId?: Prisma.StringWithAggregatesFilter<"Race"> | string
  winnerConstructorId?: Prisma.StringWithAggregatesFilter<"Race"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Race"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Race"> | Date | string
}

export type RaceCreateInput = {
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  createdAt?: Date | string
  updatedAt?: Date | string
  circuit: Prisma.CircuitCreateNestedOneWithoutRacesInput
  winner: Prisma.DriverCreateNestedOneWithoutRacesWonInput
  winnerConstructor: Prisma.ConstructorCreateNestedOneWithoutRaceWinnerConstructorsInput
  season: Prisma.SeasonCreateNestedOneWithoutRacesInput
}

export type RaceUncheckedCreateInput = {
  id?: number
  seasonId: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  circuitId: string
  winnerId: string
  winnerConstructorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  circuit?: Prisma.CircuitUpdateOneRequiredWithoutRacesNestedInput
  winner?: Prisma.DriverUpdateOneRequiredWithoutRacesWonNestedInput
  winnerConstructor?: Prisma.ConstructorUpdateOneRequiredWithoutRaceWinnerConstructorsNestedInput
  season?: Prisma.SeasonUpdateOneRequiredWithoutRacesNestedInput
}

export type RaceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  seasonId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerConstructorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceCreateManyInput = {
  id?: number
  seasonId: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  circuitId: string
  winnerId: string
  winnerConstructorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  seasonId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerConstructorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceListRelationFilter = {
  every?: Prisma.RaceWhereInput
  some?: Prisma.RaceWhereInput
  none?: Prisma.RaceWhereInput
}

export type RaceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RaceSeasonIdRoundCompoundUniqueInput = {
  seasonId: number
  round: number
}

export type RaceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  seasonId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  round?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  points?: Prisma.SortOrder
  laps?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winnerConstructorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RaceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  seasonId?: Prisma.SortOrder
  round?: Prisma.SortOrder
  points?: Prisma.SortOrder
  laps?: Prisma.SortOrder
}

export type RaceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  seasonId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  round?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  points?: Prisma.SortOrder
  laps?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winnerConstructorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RaceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  seasonId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  round?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  points?: Prisma.SortOrder
  laps?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winnerConstructorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RaceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  seasonId?: Prisma.SortOrder
  round?: Prisma.SortOrder
  points?: Prisma.SortOrder
  laps?: Prisma.SortOrder
}

export type RaceCreateNestedManyWithoutSeasonInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutSeasonInput, Prisma.RaceUncheckedCreateWithoutSeasonInput> | Prisma.RaceCreateWithoutSeasonInput[] | Prisma.RaceUncheckedCreateWithoutSeasonInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutSeasonInput | Prisma.RaceCreateOrConnectWithoutSeasonInput[]
  createMany?: Prisma.RaceCreateManySeasonInputEnvelope
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
}

export type RaceUncheckedCreateNestedManyWithoutSeasonInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutSeasonInput, Prisma.RaceUncheckedCreateWithoutSeasonInput> | Prisma.RaceCreateWithoutSeasonInput[] | Prisma.RaceUncheckedCreateWithoutSeasonInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutSeasonInput | Prisma.RaceCreateOrConnectWithoutSeasonInput[]
  createMany?: Prisma.RaceCreateManySeasonInputEnvelope
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
}

export type RaceUpdateManyWithoutSeasonNestedInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutSeasonInput, Prisma.RaceUncheckedCreateWithoutSeasonInput> | Prisma.RaceCreateWithoutSeasonInput[] | Prisma.RaceUncheckedCreateWithoutSeasonInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutSeasonInput | Prisma.RaceCreateOrConnectWithoutSeasonInput[]
  upsert?: Prisma.RaceUpsertWithWhereUniqueWithoutSeasonInput | Prisma.RaceUpsertWithWhereUniqueWithoutSeasonInput[]
  createMany?: Prisma.RaceCreateManySeasonInputEnvelope
  set?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  disconnect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  delete?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  update?: Prisma.RaceUpdateWithWhereUniqueWithoutSeasonInput | Prisma.RaceUpdateWithWhereUniqueWithoutSeasonInput[]
  updateMany?: Prisma.RaceUpdateManyWithWhereWithoutSeasonInput | Prisma.RaceUpdateManyWithWhereWithoutSeasonInput[]
  deleteMany?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
}

export type RaceUncheckedUpdateManyWithoutSeasonNestedInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutSeasonInput, Prisma.RaceUncheckedCreateWithoutSeasonInput> | Prisma.RaceCreateWithoutSeasonInput[] | Prisma.RaceUncheckedCreateWithoutSeasonInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutSeasonInput | Prisma.RaceCreateOrConnectWithoutSeasonInput[]
  upsert?: Prisma.RaceUpsertWithWhereUniqueWithoutSeasonInput | Prisma.RaceUpsertWithWhereUniqueWithoutSeasonInput[]
  createMany?: Prisma.RaceCreateManySeasonInputEnvelope
  set?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  disconnect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  delete?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  update?: Prisma.RaceUpdateWithWhereUniqueWithoutSeasonInput | Prisma.RaceUpdateWithWhereUniqueWithoutSeasonInput[]
  updateMany?: Prisma.RaceUpdateManyWithWhereWithoutSeasonInput | Prisma.RaceUpdateManyWithWhereWithoutSeasonInput[]
  deleteMany?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
}

export type RaceCreateNestedManyWithoutCircuitInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutCircuitInput, Prisma.RaceUncheckedCreateWithoutCircuitInput> | Prisma.RaceCreateWithoutCircuitInput[] | Prisma.RaceUncheckedCreateWithoutCircuitInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutCircuitInput | Prisma.RaceCreateOrConnectWithoutCircuitInput[]
  createMany?: Prisma.RaceCreateManyCircuitInputEnvelope
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
}

export type RaceUncheckedCreateNestedManyWithoutCircuitInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutCircuitInput, Prisma.RaceUncheckedCreateWithoutCircuitInput> | Prisma.RaceCreateWithoutCircuitInput[] | Prisma.RaceUncheckedCreateWithoutCircuitInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutCircuitInput | Prisma.RaceCreateOrConnectWithoutCircuitInput[]
  createMany?: Prisma.RaceCreateManyCircuitInputEnvelope
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
}

export type RaceUpdateManyWithoutCircuitNestedInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutCircuitInput, Prisma.RaceUncheckedCreateWithoutCircuitInput> | Prisma.RaceCreateWithoutCircuitInput[] | Prisma.RaceUncheckedCreateWithoutCircuitInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutCircuitInput | Prisma.RaceCreateOrConnectWithoutCircuitInput[]
  upsert?: Prisma.RaceUpsertWithWhereUniqueWithoutCircuitInput | Prisma.RaceUpsertWithWhereUniqueWithoutCircuitInput[]
  createMany?: Prisma.RaceCreateManyCircuitInputEnvelope
  set?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  disconnect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  delete?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  update?: Prisma.RaceUpdateWithWhereUniqueWithoutCircuitInput | Prisma.RaceUpdateWithWhereUniqueWithoutCircuitInput[]
  updateMany?: Prisma.RaceUpdateManyWithWhereWithoutCircuitInput | Prisma.RaceUpdateManyWithWhereWithoutCircuitInput[]
  deleteMany?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
}

export type RaceUncheckedUpdateManyWithoutCircuitNestedInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutCircuitInput, Prisma.RaceUncheckedCreateWithoutCircuitInput> | Prisma.RaceCreateWithoutCircuitInput[] | Prisma.RaceUncheckedCreateWithoutCircuitInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutCircuitInput | Prisma.RaceCreateOrConnectWithoutCircuitInput[]
  upsert?: Prisma.RaceUpsertWithWhereUniqueWithoutCircuitInput | Prisma.RaceUpsertWithWhereUniqueWithoutCircuitInput[]
  createMany?: Prisma.RaceCreateManyCircuitInputEnvelope
  set?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  disconnect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  delete?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  update?: Prisma.RaceUpdateWithWhereUniqueWithoutCircuitInput | Prisma.RaceUpdateWithWhereUniqueWithoutCircuitInput[]
  updateMany?: Prisma.RaceUpdateManyWithWhereWithoutCircuitInput | Prisma.RaceUpdateManyWithWhereWithoutCircuitInput[]
  deleteMany?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
}

export type RaceCreateNestedManyWithoutWinnerConstructorInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutWinnerConstructorInput, Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput> | Prisma.RaceCreateWithoutWinnerConstructorInput[] | Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutWinnerConstructorInput | Prisma.RaceCreateOrConnectWithoutWinnerConstructorInput[]
  createMany?: Prisma.RaceCreateManyWinnerConstructorInputEnvelope
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
}

export type RaceUncheckedCreateNestedManyWithoutWinnerConstructorInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutWinnerConstructorInput, Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput> | Prisma.RaceCreateWithoutWinnerConstructorInput[] | Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutWinnerConstructorInput | Prisma.RaceCreateOrConnectWithoutWinnerConstructorInput[]
  createMany?: Prisma.RaceCreateManyWinnerConstructorInputEnvelope
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
}

export type RaceUpdateManyWithoutWinnerConstructorNestedInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutWinnerConstructorInput, Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput> | Prisma.RaceCreateWithoutWinnerConstructorInput[] | Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutWinnerConstructorInput | Prisma.RaceCreateOrConnectWithoutWinnerConstructorInput[]
  upsert?: Prisma.RaceUpsertWithWhereUniqueWithoutWinnerConstructorInput | Prisma.RaceUpsertWithWhereUniqueWithoutWinnerConstructorInput[]
  createMany?: Prisma.RaceCreateManyWinnerConstructorInputEnvelope
  set?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  disconnect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  delete?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  update?: Prisma.RaceUpdateWithWhereUniqueWithoutWinnerConstructorInput | Prisma.RaceUpdateWithWhereUniqueWithoutWinnerConstructorInput[]
  updateMany?: Prisma.RaceUpdateManyWithWhereWithoutWinnerConstructorInput | Prisma.RaceUpdateManyWithWhereWithoutWinnerConstructorInput[]
  deleteMany?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
}

export type RaceUncheckedUpdateManyWithoutWinnerConstructorNestedInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutWinnerConstructorInput, Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput> | Prisma.RaceCreateWithoutWinnerConstructorInput[] | Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutWinnerConstructorInput | Prisma.RaceCreateOrConnectWithoutWinnerConstructorInput[]
  upsert?: Prisma.RaceUpsertWithWhereUniqueWithoutWinnerConstructorInput | Prisma.RaceUpsertWithWhereUniqueWithoutWinnerConstructorInput[]
  createMany?: Prisma.RaceCreateManyWinnerConstructorInputEnvelope
  set?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  disconnect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  delete?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  update?: Prisma.RaceUpdateWithWhereUniqueWithoutWinnerConstructorInput | Prisma.RaceUpdateWithWhereUniqueWithoutWinnerConstructorInput[]
  updateMany?: Prisma.RaceUpdateManyWithWhereWithoutWinnerConstructorInput | Prisma.RaceUpdateManyWithWhereWithoutWinnerConstructorInput[]
  deleteMany?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
}

export type RaceCreateNestedManyWithoutWinnerInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutWinnerInput, Prisma.RaceUncheckedCreateWithoutWinnerInput> | Prisma.RaceCreateWithoutWinnerInput[] | Prisma.RaceUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutWinnerInput | Prisma.RaceCreateOrConnectWithoutWinnerInput[]
  createMany?: Prisma.RaceCreateManyWinnerInputEnvelope
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
}

export type RaceUncheckedCreateNestedManyWithoutWinnerInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutWinnerInput, Prisma.RaceUncheckedCreateWithoutWinnerInput> | Prisma.RaceCreateWithoutWinnerInput[] | Prisma.RaceUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutWinnerInput | Prisma.RaceCreateOrConnectWithoutWinnerInput[]
  createMany?: Prisma.RaceCreateManyWinnerInputEnvelope
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
}

export type RaceUpdateManyWithoutWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutWinnerInput, Prisma.RaceUncheckedCreateWithoutWinnerInput> | Prisma.RaceCreateWithoutWinnerInput[] | Prisma.RaceUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutWinnerInput | Prisma.RaceCreateOrConnectWithoutWinnerInput[]
  upsert?: Prisma.RaceUpsertWithWhereUniqueWithoutWinnerInput | Prisma.RaceUpsertWithWhereUniqueWithoutWinnerInput[]
  createMany?: Prisma.RaceCreateManyWinnerInputEnvelope
  set?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  disconnect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  delete?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  update?: Prisma.RaceUpdateWithWhereUniqueWithoutWinnerInput | Prisma.RaceUpdateWithWhereUniqueWithoutWinnerInput[]
  updateMany?: Prisma.RaceUpdateManyWithWhereWithoutWinnerInput | Prisma.RaceUpdateManyWithWhereWithoutWinnerInput[]
  deleteMany?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
}

export type RaceUncheckedUpdateManyWithoutWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.RaceCreateWithoutWinnerInput, Prisma.RaceUncheckedCreateWithoutWinnerInput> | Prisma.RaceCreateWithoutWinnerInput[] | Prisma.RaceUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.RaceCreateOrConnectWithoutWinnerInput | Prisma.RaceCreateOrConnectWithoutWinnerInput[]
  upsert?: Prisma.RaceUpsertWithWhereUniqueWithoutWinnerInput | Prisma.RaceUpsertWithWhereUniqueWithoutWinnerInput[]
  createMany?: Prisma.RaceCreateManyWinnerInputEnvelope
  set?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  disconnect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  delete?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  connect?: Prisma.RaceWhereUniqueInput | Prisma.RaceWhereUniqueInput[]
  update?: Prisma.RaceUpdateWithWhereUniqueWithoutWinnerInput | Prisma.RaceUpdateWithWhereUniqueWithoutWinnerInput[]
  updateMany?: Prisma.RaceUpdateManyWithWhereWithoutWinnerInput | Prisma.RaceUpdateManyWithWhereWithoutWinnerInput[]
  deleteMany?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
}

export type RaceCreateWithoutSeasonInput = {
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  createdAt?: Date | string
  updatedAt?: Date | string
  circuit: Prisma.CircuitCreateNestedOneWithoutRacesInput
  winner: Prisma.DriverCreateNestedOneWithoutRacesWonInput
  winnerConstructor: Prisma.ConstructorCreateNestedOneWithoutRaceWinnerConstructorsInput
}

export type RaceUncheckedCreateWithoutSeasonInput = {
  id?: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  circuitId: string
  winnerId: string
  winnerConstructorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceCreateOrConnectWithoutSeasonInput = {
  where: Prisma.RaceWhereUniqueInput
  create: Prisma.XOR<Prisma.RaceCreateWithoutSeasonInput, Prisma.RaceUncheckedCreateWithoutSeasonInput>
}

export type RaceCreateManySeasonInputEnvelope = {
  data: Prisma.RaceCreateManySeasonInput | Prisma.RaceCreateManySeasonInput[]
  skipDuplicates?: boolean
}

export type RaceUpsertWithWhereUniqueWithoutSeasonInput = {
  where: Prisma.RaceWhereUniqueInput
  update: Prisma.XOR<Prisma.RaceUpdateWithoutSeasonInput, Prisma.RaceUncheckedUpdateWithoutSeasonInput>
  create: Prisma.XOR<Prisma.RaceCreateWithoutSeasonInput, Prisma.RaceUncheckedCreateWithoutSeasonInput>
}

export type RaceUpdateWithWhereUniqueWithoutSeasonInput = {
  where: Prisma.RaceWhereUniqueInput
  data: Prisma.XOR<Prisma.RaceUpdateWithoutSeasonInput, Prisma.RaceUncheckedUpdateWithoutSeasonInput>
}

export type RaceUpdateManyWithWhereWithoutSeasonInput = {
  where: Prisma.RaceScalarWhereInput
  data: Prisma.XOR<Prisma.RaceUpdateManyMutationInput, Prisma.RaceUncheckedUpdateManyWithoutSeasonInput>
}

export type RaceScalarWhereInput = {
  AND?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
  OR?: Prisma.RaceScalarWhereInput[]
  NOT?: Prisma.RaceScalarWhereInput | Prisma.RaceScalarWhereInput[]
  id?: Prisma.IntFilter<"Race"> | number
  seasonId?: Prisma.IntFilter<"Race"> | number
  name?: Prisma.StringFilter<"Race"> | string
  round?: Prisma.IntFilter<"Race"> | number
  startedAt?: Prisma.DateTimeFilter<"Race"> | Date | string
  points?: Prisma.IntFilter<"Race"> | number
  laps?: Prisma.IntFilter<"Race"> | number
  circuitId?: Prisma.StringFilter<"Race"> | string
  winnerId?: Prisma.StringFilter<"Race"> | string
  winnerConstructorId?: Prisma.StringFilter<"Race"> | string
  createdAt?: Prisma.DateTimeFilter<"Race"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Race"> | Date | string
}

export type RaceCreateWithoutCircuitInput = {
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  createdAt?: Date | string
  updatedAt?: Date | string
  winner: Prisma.DriverCreateNestedOneWithoutRacesWonInput
  winnerConstructor: Prisma.ConstructorCreateNestedOneWithoutRaceWinnerConstructorsInput
  season: Prisma.SeasonCreateNestedOneWithoutRacesInput
}

export type RaceUncheckedCreateWithoutCircuitInput = {
  id?: number
  seasonId: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  winnerId: string
  winnerConstructorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceCreateOrConnectWithoutCircuitInput = {
  where: Prisma.RaceWhereUniqueInput
  create: Prisma.XOR<Prisma.RaceCreateWithoutCircuitInput, Prisma.RaceUncheckedCreateWithoutCircuitInput>
}

export type RaceCreateManyCircuitInputEnvelope = {
  data: Prisma.RaceCreateManyCircuitInput | Prisma.RaceCreateManyCircuitInput[]
  skipDuplicates?: boolean
}

export type RaceUpsertWithWhereUniqueWithoutCircuitInput = {
  where: Prisma.RaceWhereUniqueInput
  update: Prisma.XOR<Prisma.RaceUpdateWithoutCircuitInput, Prisma.RaceUncheckedUpdateWithoutCircuitInput>
  create: Prisma.XOR<Prisma.RaceCreateWithoutCircuitInput, Prisma.RaceUncheckedCreateWithoutCircuitInput>
}

export type RaceUpdateWithWhereUniqueWithoutCircuitInput = {
  where: Prisma.RaceWhereUniqueInput
  data: Prisma.XOR<Prisma.RaceUpdateWithoutCircuitInput, Prisma.RaceUncheckedUpdateWithoutCircuitInput>
}

export type RaceUpdateManyWithWhereWithoutCircuitInput = {
  where: Prisma.RaceScalarWhereInput
  data: Prisma.XOR<Prisma.RaceUpdateManyMutationInput, Prisma.RaceUncheckedUpdateManyWithoutCircuitInput>
}

export type RaceCreateWithoutWinnerConstructorInput = {
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  createdAt?: Date | string
  updatedAt?: Date | string
  circuit: Prisma.CircuitCreateNestedOneWithoutRacesInput
  winner: Prisma.DriverCreateNestedOneWithoutRacesWonInput
  season: Prisma.SeasonCreateNestedOneWithoutRacesInput
}

export type RaceUncheckedCreateWithoutWinnerConstructorInput = {
  id?: number
  seasonId: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  circuitId: string
  winnerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceCreateOrConnectWithoutWinnerConstructorInput = {
  where: Prisma.RaceWhereUniqueInput
  create: Prisma.XOR<Prisma.RaceCreateWithoutWinnerConstructorInput, Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput>
}

export type RaceCreateManyWinnerConstructorInputEnvelope = {
  data: Prisma.RaceCreateManyWinnerConstructorInput | Prisma.RaceCreateManyWinnerConstructorInput[]
  skipDuplicates?: boolean
}

export type RaceUpsertWithWhereUniqueWithoutWinnerConstructorInput = {
  where: Prisma.RaceWhereUniqueInput
  update: Prisma.XOR<Prisma.RaceUpdateWithoutWinnerConstructorInput, Prisma.RaceUncheckedUpdateWithoutWinnerConstructorInput>
  create: Prisma.XOR<Prisma.RaceCreateWithoutWinnerConstructorInput, Prisma.RaceUncheckedCreateWithoutWinnerConstructorInput>
}

export type RaceUpdateWithWhereUniqueWithoutWinnerConstructorInput = {
  where: Prisma.RaceWhereUniqueInput
  data: Prisma.XOR<Prisma.RaceUpdateWithoutWinnerConstructorInput, Prisma.RaceUncheckedUpdateWithoutWinnerConstructorInput>
}

export type RaceUpdateManyWithWhereWithoutWinnerConstructorInput = {
  where: Prisma.RaceScalarWhereInput
  data: Prisma.XOR<Prisma.RaceUpdateManyMutationInput, Prisma.RaceUncheckedUpdateManyWithoutWinnerConstructorInput>
}

export type RaceCreateWithoutWinnerInput = {
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  createdAt?: Date | string
  updatedAt?: Date | string
  circuit: Prisma.CircuitCreateNestedOneWithoutRacesInput
  winnerConstructor: Prisma.ConstructorCreateNestedOneWithoutRaceWinnerConstructorsInput
  season: Prisma.SeasonCreateNestedOneWithoutRacesInput
}

export type RaceUncheckedCreateWithoutWinnerInput = {
  id?: number
  seasonId: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  circuitId: string
  winnerConstructorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceCreateOrConnectWithoutWinnerInput = {
  where: Prisma.RaceWhereUniqueInput
  create: Prisma.XOR<Prisma.RaceCreateWithoutWinnerInput, Prisma.RaceUncheckedCreateWithoutWinnerInput>
}

export type RaceCreateManyWinnerInputEnvelope = {
  data: Prisma.RaceCreateManyWinnerInput | Prisma.RaceCreateManyWinnerInput[]
  skipDuplicates?: boolean
}

export type RaceUpsertWithWhereUniqueWithoutWinnerInput = {
  where: Prisma.RaceWhereUniqueInput
  update: Prisma.XOR<Prisma.RaceUpdateWithoutWinnerInput, Prisma.RaceUncheckedUpdateWithoutWinnerInput>
  create: Prisma.XOR<Prisma.RaceCreateWithoutWinnerInput, Prisma.RaceUncheckedCreateWithoutWinnerInput>
}

export type RaceUpdateWithWhereUniqueWithoutWinnerInput = {
  where: Prisma.RaceWhereUniqueInput
  data: Prisma.XOR<Prisma.RaceUpdateWithoutWinnerInput, Prisma.RaceUncheckedUpdateWithoutWinnerInput>
}

export type RaceUpdateManyWithWhereWithoutWinnerInput = {
  where: Prisma.RaceScalarWhereInput
  data: Prisma.XOR<Prisma.RaceUpdateManyMutationInput, Prisma.RaceUncheckedUpdateManyWithoutWinnerInput>
}

export type RaceCreateManySeasonInput = {
  id?: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  circuitId: string
  winnerId: string
  winnerConstructorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceUpdateWithoutSeasonInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  circuit?: Prisma.CircuitUpdateOneRequiredWithoutRacesNestedInput
  winner?: Prisma.DriverUpdateOneRequiredWithoutRacesWonNestedInput
  winnerConstructor?: Prisma.ConstructorUpdateOneRequiredWithoutRaceWinnerConstructorsNestedInput
}

export type RaceUncheckedUpdateWithoutSeasonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerConstructorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceUncheckedUpdateManyWithoutSeasonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerConstructorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceCreateManyCircuitInput = {
  id?: number
  seasonId: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  winnerId: string
  winnerConstructorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceUpdateWithoutCircuitInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  winner?: Prisma.DriverUpdateOneRequiredWithoutRacesWonNestedInput
  winnerConstructor?: Prisma.ConstructorUpdateOneRequiredWithoutRaceWinnerConstructorsNestedInput
  season?: Prisma.SeasonUpdateOneRequiredWithoutRacesNestedInput
}

export type RaceUncheckedUpdateWithoutCircuitInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  seasonId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerConstructorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceUncheckedUpdateManyWithoutCircuitInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  seasonId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerConstructorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceCreateManyWinnerConstructorInput = {
  id?: number
  seasonId: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  circuitId: string
  winnerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceUpdateWithoutWinnerConstructorInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  circuit?: Prisma.CircuitUpdateOneRequiredWithoutRacesNestedInput
  winner?: Prisma.DriverUpdateOneRequiredWithoutRacesWonNestedInput
  season?: Prisma.SeasonUpdateOneRequiredWithoutRacesNestedInput
}

export type RaceUncheckedUpdateWithoutWinnerConstructorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  seasonId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceUncheckedUpdateManyWithoutWinnerConstructorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  seasonId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceCreateManyWinnerInput = {
  id?: number
  seasonId: number
  name: string
  round: number
  startedAt: Date | string
  points: number
  laps: number
  circuitId: string
  winnerConstructorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RaceUpdateWithoutWinnerInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  circuit?: Prisma.CircuitUpdateOneRequiredWithoutRacesNestedInput
  winnerConstructor?: Prisma.ConstructorUpdateOneRequiredWithoutRaceWinnerConstructorsNestedInput
  season?: Prisma.SeasonUpdateOneRequiredWithoutRacesNestedInput
}

export type RaceUncheckedUpdateWithoutWinnerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  seasonId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerConstructorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RaceUncheckedUpdateManyWithoutWinnerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  seasonId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  round?: Prisma.IntFieldUpdateOperationsInput | number
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  points?: Prisma.IntFieldUpdateOperationsInput | number
  laps?: Prisma.IntFieldUpdateOperationsInput | number
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerConstructorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type RaceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  seasonId?: boolean
  name?: boolean
  round?: boolean
  startedAt?: boolean
  points?: boolean
  laps?: boolean
  circuitId?: boolean
  winnerId?: boolean
  winnerConstructorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  circuit?: boolean | Prisma.CircuitDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
  winnerConstructor?: boolean | Prisma.ConstructorDefaultArgs<ExtArgs>
  season?: boolean | Prisma.SeasonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["race"]>

export type RaceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  seasonId?: boolean
  name?: boolean
  round?: boolean
  startedAt?: boolean
  points?: boolean
  laps?: boolean
  circuitId?: boolean
  winnerId?: boolean
  winnerConstructorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  circuit?: boolean | Prisma.CircuitDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
  winnerConstructor?: boolean | Prisma.ConstructorDefaultArgs<ExtArgs>
  season?: boolean | Prisma.SeasonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["race"]>

export type RaceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  seasonId?: boolean
  name?: boolean
  round?: boolean
  startedAt?: boolean
  points?: boolean
  laps?: boolean
  circuitId?: boolean
  winnerId?: boolean
  winnerConstructorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  circuit?: boolean | Prisma.CircuitDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
  winnerConstructor?: boolean | Prisma.ConstructorDefaultArgs<ExtArgs>
  season?: boolean | Prisma.SeasonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["race"]>

export type RaceSelectScalar = {
  id?: boolean
  seasonId?: boolean
  name?: boolean
  round?: boolean
  startedAt?: boolean
  points?: boolean
  laps?: boolean
  circuitId?: boolean
  winnerId?: boolean
  winnerConstructorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type RaceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "seasonId" | "name" | "round" | "startedAt" | "points" | "laps" | "circuitId" | "winnerId" | "winnerConstructorId" | "createdAt" | "updatedAt", ExtArgs["result"]["race"]>
export type RaceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  circuit?: boolean | Prisma.CircuitDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
  winnerConstructor?: boolean | Prisma.ConstructorDefaultArgs<ExtArgs>
  season?: boolean | Prisma.SeasonDefaultArgs<ExtArgs>
}
export type RaceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  circuit?: boolean | Prisma.CircuitDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
  winnerConstructor?: boolean | Prisma.ConstructorDefaultArgs<ExtArgs>
  season?: boolean | Prisma.SeasonDefaultArgs<ExtArgs>
}
export type RaceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  circuit?: boolean | Prisma.CircuitDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.DriverDefaultArgs<ExtArgs>
  winnerConstructor?: boolean | Prisma.ConstructorDefaultArgs<ExtArgs>
  season?: boolean | Prisma.SeasonDefaultArgs<ExtArgs>
}

export type $RacePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Race"
  objects: {
    circuit: Prisma.$CircuitPayload<ExtArgs>
    winner: Prisma.$DriverPayload<ExtArgs>
    winnerConstructor: Prisma.$ConstructorPayload<ExtArgs>
    season: Prisma.$SeasonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    seasonId: number
    name: string
    round: number
    startedAt: Date
    points: number
    laps: number
    circuitId: string
    winnerId: string
    winnerConstructorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["race"]>
  composites: {}
}

export type RaceGetPayload<S extends boolean | null | undefined | RaceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RacePayload, S>

export type RaceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RaceCountAggregateInputType | true
  }

export interface RaceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Race'], meta: { name: 'Race' } }
  /**
   * Find zero or one Race that matches the filter.
   * @param {RaceFindUniqueArgs} args - Arguments to find a Race
   * @example
   * // Get one Race
   * const race = await prisma.race.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RaceFindUniqueArgs>(args: Prisma.SelectSubset<T, RaceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RaceClient<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Race that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RaceFindUniqueOrThrowArgs} args - Arguments to find a Race
   * @example
   * // Get one Race
   * const race = await prisma.race.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RaceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RaceClient<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Race that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RaceFindFirstArgs} args - Arguments to find a Race
   * @example
   * // Get one Race
   * const race = await prisma.race.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RaceFindFirstArgs>(args?: Prisma.SelectSubset<T, RaceFindFirstArgs<ExtArgs>>): Prisma.Prisma__RaceClient<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Race that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RaceFindFirstOrThrowArgs} args - Arguments to find a Race
   * @example
   * // Get one Race
   * const race = await prisma.race.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RaceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RaceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RaceClient<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Races that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RaceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Races
   * const races = await prisma.race.findMany()
   * 
   * // Get first 10 Races
   * const races = await prisma.race.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const raceWithIdOnly = await prisma.race.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RaceFindManyArgs>(args?: Prisma.SelectSubset<T, RaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Race.
   * @param {RaceCreateArgs} args - Arguments to create a Race.
   * @example
   * // Create one Race
   * const Race = await prisma.race.create({
   *   data: {
   *     // ... data to create a Race
   *   }
   * })
   * 
   */
  create<T extends RaceCreateArgs>(args: Prisma.SelectSubset<T, RaceCreateArgs<ExtArgs>>): Prisma.Prisma__RaceClient<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Races.
   * @param {RaceCreateManyArgs} args - Arguments to create many Races.
   * @example
   * // Create many Races
   * const race = await prisma.race.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RaceCreateManyArgs>(args?: Prisma.SelectSubset<T, RaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Races and returns the data saved in the database.
   * @param {RaceCreateManyAndReturnArgs} args - Arguments to create many Races.
   * @example
   * // Create many Races
   * const race = await prisma.race.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Races and only return the `id`
   * const raceWithIdOnly = await prisma.race.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RaceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Race.
   * @param {RaceDeleteArgs} args - Arguments to delete one Race.
   * @example
   * // Delete one Race
   * const Race = await prisma.race.delete({
   *   where: {
   *     // ... filter to delete one Race
   *   }
   * })
   * 
   */
  delete<T extends RaceDeleteArgs>(args: Prisma.SelectSubset<T, RaceDeleteArgs<ExtArgs>>): Prisma.Prisma__RaceClient<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Race.
   * @param {RaceUpdateArgs} args - Arguments to update one Race.
   * @example
   * // Update one Race
   * const race = await prisma.race.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RaceUpdateArgs>(args: Prisma.SelectSubset<T, RaceUpdateArgs<ExtArgs>>): Prisma.Prisma__RaceClient<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Races.
   * @param {RaceDeleteManyArgs} args - Arguments to filter Races to delete.
   * @example
   * // Delete a few Races
   * const { count } = await prisma.race.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RaceDeleteManyArgs>(args?: Prisma.SelectSubset<T, RaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Races.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RaceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Races
   * const race = await prisma.race.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RaceUpdateManyArgs>(args: Prisma.SelectSubset<T, RaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Races and returns the data updated in the database.
   * @param {RaceUpdateManyAndReturnArgs} args - Arguments to update many Races.
   * @example
   * // Update many Races
   * const race = await prisma.race.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Races and only return the `id`
   * const raceWithIdOnly = await prisma.race.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RaceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Race.
   * @param {RaceUpsertArgs} args - Arguments to update or create a Race.
   * @example
   * // Update or create a Race
   * const race = await prisma.race.upsert({
   *   create: {
   *     // ... data to create a Race
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Race we want to update
   *   }
   * })
   */
  upsert<T extends RaceUpsertArgs>(args: Prisma.SelectSubset<T, RaceUpsertArgs<ExtArgs>>): Prisma.Prisma__RaceClient<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Races.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RaceCountArgs} args - Arguments to filter Races to count.
   * @example
   * // Count the number of Races
   * const count = await prisma.race.count({
   *   where: {
   *     // ... the filter for the Races we want to count
   *   }
   * })
  **/
  count<T extends RaceCountArgs>(
    args?: Prisma.Subset<T, RaceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RaceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Race.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RaceAggregateArgs>(args: Prisma.Subset<T, RaceAggregateArgs>): Prisma.PrismaPromise<GetRaceAggregateType<T>>

  /**
   * Group by Race.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RaceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RaceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RaceGroupByArgs['orderBy'] }
      : { orderBy?: RaceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Race model
 */
readonly fields: RaceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Race.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RaceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  circuit<T extends Prisma.CircuitDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CircuitDefaultArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  winner<T extends Prisma.DriverDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DriverDefaultArgs<ExtArgs>>): Prisma.Prisma__DriverClient<runtime.Types.Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  winnerConstructor<T extends Prisma.ConstructorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ConstructorDefaultArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  season<T extends Prisma.SeasonDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SeasonDefaultArgs<ExtArgs>>): Prisma.Prisma__SeasonClient<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Race model
 */
export interface RaceFieldRefs {
  readonly id: Prisma.FieldRef<"Race", 'Int'>
  readonly seasonId: Prisma.FieldRef<"Race", 'Int'>
  readonly name: Prisma.FieldRef<"Race", 'String'>
  readonly round: Prisma.FieldRef<"Race", 'Int'>
  readonly startedAt: Prisma.FieldRef<"Race", 'DateTime'>
  readonly points: Prisma.FieldRef<"Race", 'Int'>
  readonly laps: Prisma.FieldRef<"Race", 'Int'>
  readonly circuitId: Prisma.FieldRef<"Race", 'String'>
  readonly winnerId: Prisma.FieldRef<"Race", 'String'>
  readonly winnerConstructorId: Prisma.FieldRef<"Race", 'String'>
  readonly createdAt: Prisma.FieldRef<"Race", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Race", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Race findUnique
 */
export type RaceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * Filter, which Race to fetch.
   */
  where: Prisma.RaceWhereUniqueInput
}

/**
 * Race findUniqueOrThrow
 */
export type RaceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * Filter, which Race to fetch.
   */
  where: Prisma.RaceWhereUniqueInput
}

/**
 * Race findFirst
 */
export type RaceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * Filter, which Race to fetch.
   */
  where?: Prisma.RaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Races to fetch.
   */
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Races.
   */
  cursor?: Prisma.RaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Races from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Races.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Races.
   */
  distinct?: Prisma.RaceScalarFieldEnum | Prisma.RaceScalarFieldEnum[]
}

/**
 * Race findFirstOrThrow
 */
export type RaceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * Filter, which Race to fetch.
   */
  where?: Prisma.RaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Races to fetch.
   */
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Races.
   */
  cursor?: Prisma.RaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Races from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Races.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Races.
   */
  distinct?: Prisma.RaceScalarFieldEnum | Prisma.RaceScalarFieldEnum[]
}

/**
 * Race findMany
 */
export type RaceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * Filter, which Races to fetch.
   */
  where?: Prisma.RaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Races to fetch.
   */
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Races.
   */
  cursor?: Prisma.RaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Races from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Races.
   */
  skip?: number
  distinct?: Prisma.RaceScalarFieldEnum | Prisma.RaceScalarFieldEnum[]
}

/**
 * Race create
 */
export type RaceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * The data needed to create a Race.
   */
  data: Prisma.XOR<Prisma.RaceCreateInput, Prisma.RaceUncheckedCreateInput>
}

/**
 * Race createMany
 */
export type RaceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Races.
   */
  data: Prisma.RaceCreateManyInput | Prisma.RaceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Race createManyAndReturn
 */
export type RaceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * The data used to create many Races.
   */
  data: Prisma.RaceCreateManyInput | Prisma.RaceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Race update
 */
export type RaceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * The data needed to update a Race.
   */
  data: Prisma.XOR<Prisma.RaceUpdateInput, Prisma.RaceUncheckedUpdateInput>
  /**
   * Choose, which Race to update.
   */
  where: Prisma.RaceWhereUniqueInput
}

/**
 * Race updateMany
 */
export type RaceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Races.
   */
  data: Prisma.XOR<Prisma.RaceUpdateManyMutationInput, Prisma.RaceUncheckedUpdateManyInput>
  /**
   * Filter which Races to update
   */
  where?: Prisma.RaceWhereInput
  /**
   * Limit how many Races to update.
   */
  limit?: number
}

/**
 * Race updateManyAndReturn
 */
export type RaceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * The data used to update Races.
   */
  data: Prisma.XOR<Prisma.RaceUpdateManyMutationInput, Prisma.RaceUncheckedUpdateManyInput>
  /**
   * Filter which Races to update
   */
  where?: Prisma.RaceWhereInput
  /**
   * Limit how many Races to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Race upsert
 */
export type RaceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * The filter to search for the Race to update in case it exists.
   */
  where: Prisma.RaceWhereUniqueInput
  /**
   * In case the Race found by the `where` argument doesn't exist, create a new Race with this data.
   */
  create: Prisma.XOR<Prisma.RaceCreateInput, Prisma.RaceUncheckedCreateInput>
  /**
   * In case the Race was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RaceUpdateInput, Prisma.RaceUncheckedUpdateInput>
}

/**
 * Race delete
 */
export type RaceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  /**
   * Filter which Race to delete.
   */
  where: Prisma.RaceWhereUniqueInput
}

/**
 * Race deleteMany
 */
export type RaceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Races to delete
   */
  where?: Prisma.RaceWhereInput
  /**
   * Limit how many Races to delete.
   */
  limit?: number
}

/**
 * Race without action
 */
export type RaceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
}
