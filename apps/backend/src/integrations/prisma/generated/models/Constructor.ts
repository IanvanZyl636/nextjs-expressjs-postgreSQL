
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Constructor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Constructor
 * 
 */
export type ConstructorModel = runtime.Types.Result.DefaultSelection<Prisma.$ConstructorPayload>

export type AggregateConstructor = {
  _count: ConstructorCountAggregateOutputType | null
  _min: ConstructorMinAggregateOutputType | null
  _max: ConstructorMaxAggregateOutputType | null
}

export type ConstructorMinAggregateOutputType = {
  id: string | null
  constructorId: string | null
  name: string | null
  nationality: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ConstructorMaxAggregateOutputType = {
  id: string | null
  constructorId: string | null
  name: string | null
  nationality: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ConstructorCountAggregateOutputType = {
  id: number
  constructorId: number
  name: number
  nationality: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ConstructorMinAggregateInputType = {
  id?: true
  constructorId?: true
  name?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
}

export type ConstructorMaxAggregateInputType = {
  id?: true
  constructorId?: true
  name?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
}

export type ConstructorCountAggregateInputType = {
  id?: true
  constructorId?: true
  name?: true
  nationality?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ConstructorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Constructor to aggregate.
   */
  where?: Prisma.ConstructorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Constructors to fetch.
   */
  orderBy?: Prisma.ConstructorOrderByWithRelationInput | Prisma.ConstructorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConstructorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Constructors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Constructors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Constructors
  **/
  _count?: true | ConstructorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConstructorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConstructorMaxAggregateInputType
}

export type GetConstructorAggregateType<T extends ConstructorAggregateArgs> = {
      [P in keyof T & keyof AggregateConstructor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConstructor[P]>
    : Prisma.GetScalarType<T[P], AggregateConstructor[P]>
}




export type ConstructorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConstructorWhereInput
  orderBy?: Prisma.ConstructorOrderByWithAggregationInput | Prisma.ConstructorOrderByWithAggregationInput[]
  by: Prisma.ConstructorScalarFieldEnum[] | Prisma.ConstructorScalarFieldEnum
  having?: Prisma.ConstructorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConstructorCountAggregateInputType | true
  _min?: ConstructorMinAggregateInputType
  _max?: ConstructorMaxAggregateInputType
}

export type ConstructorGroupByOutputType = {
  id: string
  constructorId: string
  name: string
  nationality: string
  createdAt: Date
  updatedAt: Date
  _count: ConstructorCountAggregateOutputType | null
  _min: ConstructorMinAggregateOutputType | null
  _max: ConstructorMaxAggregateOutputType | null
}

type GetConstructorGroupByPayload<T extends ConstructorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConstructorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConstructorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConstructorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConstructorGroupByOutputType[P]>
      }
    >
  > 



export type ConstructorWhereInput = {
  AND?: Prisma.ConstructorWhereInput | Prisma.ConstructorWhereInput[]
  OR?: Prisma.ConstructorWhereInput[]
  NOT?: Prisma.ConstructorWhereInput | Prisma.ConstructorWhereInput[]
  id?: Prisma.StringFilter<"Constructor"> | string
  constructorId?: Prisma.StringFilter<"Constructor"> | string
  name?: Prisma.StringFilter<"Constructor"> | string
  nationality?: Prisma.StringFilter<"Constructor"> | string
  createdAt?: Prisma.DateTimeFilter<"Constructor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Constructor"> | Date | string
  driverRaceWinner?: Prisma.RaceListRelationFilter
  driverSeasonWinner?: Prisma.SeasonListRelationFilter
}

export type ConstructorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  driverRaceWinner?: Prisma.RaceOrderByRelationAggregateInput
  driverSeasonWinner?: Prisma.SeasonOrderByRelationAggregateInput
}

export type ConstructorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  constructorId?: string
  name?: string
  AND?: Prisma.ConstructorWhereInput | Prisma.ConstructorWhereInput[]
  OR?: Prisma.ConstructorWhereInput[]
  NOT?: Prisma.ConstructorWhereInput | Prisma.ConstructorWhereInput[]
  nationality?: Prisma.StringFilter<"Constructor"> | string
  createdAt?: Prisma.DateTimeFilter<"Constructor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Constructor"> | Date | string
  driverRaceWinner?: Prisma.RaceListRelationFilter
  driverSeasonWinner?: Prisma.SeasonListRelationFilter
}, "id" | "constructorId" | "name">

export type ConstructorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ConstructorCountOrderByAggregateInput
  _max?: Prisma.ConstructorMaxOrderByAggregateInput
  _min?: Prisma.ConstructorMinOrderByAggregateInput
}

export type ConstructorScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConstructorScalarWhereWithAggregatesInput | Prisma.ConstructorScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConstructorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConstructorScalarWhereWithAggregatesInput | Prisma.ConstructorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Constructor"> | string
  constructorId?: Prisma.StringWithAggregatesFilter<"Constructor"> | string
  name?: Prisma.StringWithAggregatesFilter<"Constructor"> | string
  nationality?: Prisma.StringWithAggregatesFilter<"Constructor"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Constructor"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Constructor"> | Date | string
}

export type ConstructorCreateInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverRaceWinner?: Prisma.RaceCreateNestedManyWithoutWinnerConstructorInput
  driverSeasonWinner?: Prisma.SeasonCreateNestedManyWithoutChampionConstructorInput
}

export type ConstructorUncheckedCreateInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverRaceWinner?: Prisma.RaceUncheckedCreateNestedManyWithoutWinnerConstructorInput
  driverSeasonWinner?: Prisma.SeasonUncheckedCreateNestedManyWithoutChampionConstructorInput
}

export type ConstructorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverRaceWinner?: Prisma.RaceUpdateManyWithoutWinnerConstructorNestedInput
  driverSeasonWinner?: Prisma.SeasonUpdateManyWithoutChampionConstructorNestedInput
}

export type ConstructorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverRaceWinner?: Prisma.RaceUncheckedUpdateManyWithoutWinnerConstructorNestedInput
  driverSeasonWinner?: Prisma.SeasonUncheckedUpdateManyWithoutChampionConstructorNestedInput
}

export type ConstructorCreateManyInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConstructorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConstructorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConstructorScalarRelationFilter = {
  is?: Prisma.ConstructorWhereInput
  isNot?: Prisma.ConstructorWhereInput
}

export type ConstructorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConstructorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConstructorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  constructorId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConstructorCreateNestedOneWithoutDriverSeasonWinnerInput = {
  create?: Prisma.XOR<Prisma.ConstructorCreateWithoutDriverSeasonWinnerInput, Prisma.ConstructorUncheckedCreateWithoutDriverSeasonWinnerInput>
  connectOrCreate?: Prisma.ConstructorCreateOrConnectWithoutDriverSeasonWinnerInput
  connect?: Prisma.ConstructorWhereUniqueInput
}

export type ConstructorUpdateOneRequiredWithoutDriverSeasonWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.ConstructorCreateWithoutDriverSeasonWinnerInput, Prisma.ConstructorUncheckedCreateWithoutDriverSeasonWinnerInput>
  connectOrCreate?: Prisma.ConstructorCreateOrConnectWithoutDriverSeasonWinnerInput
  upsert?: Prisma.ConstructorUpsertWithoutDriverSeasonWinnerInput
  connect?: Prisma.ConstructorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ConstructorUpdateToOneWithWhereWithoutDriverSeasonWinnerInput, Prisma.ConstructorUpdateWithoutDriverSeasonWinnerInput>, Prisma.ConstructorUncheckedUpdateWithoutDriverSeasonWinnerInput>
}

export type ConstructorCreateNestedOneWithoutDriverRaceWinnerInput = {
  create?: Prisma.XOR<Prisma.ConstructorCreateWithoutDriverRaceWinnerInput, Prisma.ConstructorUncheckedCreateWithoutDriverRaceWinnerInput>
  connectOrCreate?: Prisma.ConstructorCreateOrConnectWithoutDriverRaceWinnerInput
  connect?: Prisma.ConstructorWhereUniqueInput
}

export type ConstructorUpdateOneRequiredWithoutDriverRaceWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.ConstructorCreateWithoutDriverRaceWinnerInput, Prisma.ConstructorUncheckedCreateWithoutDriverRaceWinnerInput>
  connectOrCreate?: Prisma.ConstructorCreateOrConnectWithoutDriverRaceWinnerInput
  upsert?: Prisma.ConstructorUpsertWithoutDriverRaceWinnerInput
  connect?: Prisma.ConstructorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ConstructorUpdateToOneWithWhereWithoutDriverRaceWinnerInput, Prisma.ConstructorUpdateWithoutDriverRaceWinnerInput>, Prisma.ConstructorUncheckedUpdateWithoutDriverRaceWinnerInput>
}

export type ConstructorCreateWithoutDriverSeasonWinnerInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverRaceWinner?: Prisma.RaceCreateNestedManyWithoutWinnerConstructorInput
}

export type ConstructorUncheckedCreateWithoutDriverSeasonWinnerInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverRaceWinner?: Prisma.RaceUncheckedCreateNestedManyWithoutWinnerConstructorInput
}

export type ConstructorCreateOrConnectWithoutDriverSeasonWinnerInput = {
  where: Prisma.ConstructorWhereUniqueInput
  create: Prisma.XOR<Prisma.ConstructorCreateWithoutDriverSeasonWinnerInput, Prisma.ConstructorUncheckedCreateWithoutDriverSeasonWinnerInput>
}

export type ConstructorUpsertWithoutDriverSeasonWinnerInput = {
  update: Prisma.XOR<Prisma.ConstructorUpdateWithoutDriverSeasonWinnerInput, Prisma.ConstructorUncheckedUpdateWithoutDriverSeasonWinnerInput>
  create: Prisma.XOR<Prisma.ConstructorCreateWithoutDriverSeasonWinnerInput, Prisma.ConstructorUncheckedCreateWithoutDriverSeasonWinnerInput>
  where?: Prisma.ConstructorWhereInput
}

export type ConstructorUpdateToOneWithWhereWithoutDriverSeasonWinnerInput = {
  where?: Prisma.ConstructorWhereInput
  data: Prisma.XOR<Prisma.ConstructorUpdateWithoutDriverSeasonWinnerInput, Prisma.ConstructorUncheckedUpdateWithoutDriverSeasonWinnerInput>
}

export type ConstructorUpdateWithoutDriverSeasonWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverRaceWinner?: Prisma.RaceUpdateManyWithoutWinnerConstructorNestedInput
}

export type ConstructorUncheckedUpdateWithoutDriverSeasonWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverRaceWinner?: Prisma.RaceUncheckedUpdateManyWithoutWinnerConstructorNestedInput
}

export type ConstructorCreateWithoutDriverRaceWinnerInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverSeasonWinner?: Prisma.SeasonCreateNestedManyWithoutChampionConstructorInput
}

export type ConstructorUncheckedCreateWithoutDriverRaceWinnerInput = {
  id?: string
  constructorId: string
  name: string
  nationality: string
  createdAt?: Date | string
  updatedAt?: Date | string
  driverSeasonWinner?: Prisma.SeasonUncheckedCreateNestedManyWithoutChampionConstructorInput
}

export type ConstructorCreateOrConnectWithoutDriverRaceWinnerInput = {
  where: Prisma.ConstructorWhereUniqueInput
  create: Prisma.XOR<Prisma.ConstructorCreateWithoutDriverRaceWinnerInput, Prisma.ConstructorUncheckedCreateWithoutDriverRaceWinnerInput>
}

export type ConstructorUpsertWithoutDriverRaceWinnerInput = {
  update: Prisma.XOR<Prisma.ConstructorUpdateWithoutDriverRaceWinnerInput, Prisma.ConstructorUncheckedUpdateWithoutDriverRaceWinnerInput>
  create: Prisma.XOR<Prisma.ConstructorCreateWithoutDriverRaceWinnerInput, Prisma.ConstructorUncheckedCreateWithoutDriverRaceWinnerInput>
  where?: Prisma.ConstructorWhereInput
}

export type ConstructorUpdateToOneWithWhereWithoutDriverRaceWinnerInput = {
  where?: Prisma.ConstructorWhereInput
  data: Prisma.XOR<Prisma.ConstructorUpdateWithoutDriverRaceWinnerInput, Prisma.ConstructorUncheckedUpdateWithoutDriverRaceWinnerInput>
}

export type ConstructorUpdateWithoutDriverRaceWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverSeasonWinner?: Prisma.SeasonUpdateManyWithoutChampionConstructorNestedInput
}

export type ConstructorUncheckedUpdateWithoutDriverRaceWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  constructorId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  driverSeasonWinner?: Prisma.SeasonUncheckedUpdateManyWithoutChampionConstructorNestedInput
}


/**
 * Count Type ConstructorCountOutputType
 */

export type ConstructorCountOutputType = {
  driverRaceWinner: number
  driverSeasonWinner: number
}

export type ConstructorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  driverRaceWinner?: boolean | ConstructorCountOutputTypeCountDriverRaceWinnerArgs
  driverSeasonWinner?: boolean | ConstructorCountOutputTypeCountDriverSeasonWinnerArgs
}

/**
 * ConstructorCountOutputType without action
 */
export type ConstructorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConstructorCountOutputType
   */
  select?: Prisma.ConstructorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ConstructorCountOutputType without action
 */
export type ConstructorCountOutputTypeCountDriverRaceWinnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RaceWhereInput
}

/**
 * ConstructorCountOutputType without action
 */
export type ConstructorCountOutputTypeCountDriverSeasonWinnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SeasonWhereInput
}


export type ConstructorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  constructorId?: boolean
  name?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  driverRaceWinner?: boolean | Prisma.Constructor$driverRaceWinnerArgs<ExtArgs>
  driverSeasonWinner?: boolean | Prisma.Constructor$driverSeasonWinnerArgs<ExtArgs>
  _count?: boolean | Prisma.ConstructorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["constructor"]>

export type ConstructorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  constructorId?: boolean
  name?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["constructor"]>

export type ConstructorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  constructorId?: boolean
  name?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["constructor"]>

export type ConstructorSelectScalar = {
  id?: boolean
  constructorId?: boolean
  name?: boolean
  nationality?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ConstructorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "constructorId" | "name" | "nationality" | "createdAt" | "updatedAt", ExtArgs["result"]["constructor"]>
export type ConstructorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  driverRaceWinner?: boolean | Prisma.Constructor$driverRaceWinnerArgs<ExtArgs>
  driverSeasonWinner?: boolean | Prisma.Constructor$driverSeasonWinnerArgs<ExtArgs>
  _count?: boolean | Prisma.ConstructorCountOutputTypeDefaultArgs<ExtArgs>
}
export type ConstructorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ConstructorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ConstructorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Constructor"
  objects: {
    driverRaceWinner: Prisma.$RacePayload<ExtArgs>[]
    driverSeasonWinner: Prisma.$SeasonPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    constructorId: string
    name: string
    nationality: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["constructor"]>
  composites: {}
}

export type ConstructorGetPayload<S extends boolean | null | undefined | ConstructorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConstructorPayload, S>

export type ConstructorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConstructorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConstructorCountAggregateInputType | true
  }

export interface ConstructorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Constructor'], meta: { name: 'Constructor' } }
  /**
   * Find zero or one Constructor that matches the filter.
   * @param {ConstructorFindUniqueArgs} args - Arguments to find a Constructor
   * @example
   * // Get one Constructor
   * const constructor = await prisma.constructor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConstructorFindUniqueArgs>(args: Prisma.SelectSubset<T, ConstructorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Constructor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConstructorFindUniqueOrThrowArgs} args - Arguments to find a Constructor
   * @example
   * // Get one Constructor
   * const constructor = await prisma.constructor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConstructorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConstructorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Constructor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstructorFindFirstArgs} args - Arguments to find a Constructor
   * @example
   * // Get one Constructor
   * const constructor = await prisma.constructor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConstructorFindFirstArgs>(args?: Prisma.SelectSubset<T, ConstructorFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Constructor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstructorFindFirstOrThrowArgs} args - Arguments to find a Constructor
   * @example
   * // Get one Constructor
   * const constructor = await prisma.constructor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConstructorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConstructorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Constructors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstructorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Constructors
   * const constructors = await prisma.constructor.findMany()
   * 
   * // Get first 10 Constructors
   * const constructors = await prisma.constructor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const constructorWithIdOnly = await prisma.constructor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConstructorFindManyArgs>(args?: Prisma.SelectSubset<T, ConstructorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Constructor.
   * @param {ConstructorCreateArgs} args - Arguments to create a Constructor.
   * @example
   * // Create one Constructor
   * const Constructor = await prisma.constructor.create({
   *   data: {
   *     // ... data to create a Constructor
   *   }
   * })
   * 
   */
  create<T extends ConstructorCreateArgs>(args: Prisma.SelectSubset<T, ConstructorCreateArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Constructors.
   * @param {ConstructorCreateManyArgs} args - Arguments to create many Constructors.
   * @example
   * // Create many Constructors
   * const constructor = await prisma.constructor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConstructorCreateManyArgs>(args?: Prisma.SelectSubset<T, ConstructorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Constructors and returns the data saved in the database.
   * @param {ConstructorCreateManyAndReturnArgs} args - Arguments to create many Constructors.
   * @example
   * // Create many Constructors
   * const constructor = await prisma.constructor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Constructors and only return the `id`
   * const constructorWithIdOnly = await prisma.constructor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConstructorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConstructorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Constructor.
   * @param {ConstructorDeleteArgs} args - Arguments to delete one Constructor.
   * @example
   * // Delete one Constructor
   * const Constructor = await prisma.constructor.delete({
   *   where: {
   *     // ... filter to delete one Constructor
   *   }
   * })
   * 
   */
  delete<T extends ConstructorDeleteArgs>(args: Prisma.SelectSubset<T, ConstructorDeleteArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Constructor.
   * @param {ConstructorUpdateArgs} args - Arguments to update one Constructor.
   * @example
   * // Update one Constructor
   * const constructor = await prisma.constructor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConstructorUpdateArgs>(args: Prisma.SelectSubset<T, ConstructorUpdateArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Constructors.
   * @param {ConstructorDeleteManyArgs} args - Arguments to filter Constructors to delete.
   * @example
   * // Delete a few Constructors
   * const { count } = await prisma.constructor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConstructorDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConstructorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Constructors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstructorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Constructors
   * const constructor = await prisma.constructor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConstructorUpdateManyArgs>(args: Prisma.SelectSubset<T, ConstructorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Constructors and returns the data updated in the database.
   * @param {ConstructorUpdateManyAndReturnArgs} args - Arguments to update many Constructors.
   * @example
   * // Update many Constructors
   * const constructor = await prisma.constructor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Constructors and only return the `id`
   * const constructorWithIdOnly = await prisma.constructor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConstructorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConstructorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Constructor.
   * @param {ConstructorUpsertArgs} args - Arguments to update or create a Constructor.
   * @example
   * // Update or create a Constructor
   * const constructor = await prisma.constructor.upsert({
   *   create: {
   *     // ... data to create a Constructor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Constructor we want to update
   *   }
   * })
   */
  upsert<T extends ConstructorUpsertArgs>(args: Prisma.SelectSubset<T, ConstructorUpsertArgs<ExtArgs>>): Prisma.Prisma__ConstructorClient<runtime.Types.Result.GetResult<Prisma.$ConstructorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Constructors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstructorCountArgs} args - Arguments to filter Constructors to count.
   * @example
   * // Count the number of Constructors
   * const count = await prisma.constructor.count({
   *   where: {
   *     // ... the filter for the Constructors we want to count
   *   }
   * })
  **/
  count<T extends ConstructorCountArgs>(
    args?: Prisma.Subset<T, ConstructorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConstructorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Constructor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstructorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConstructorAggregateArgs>(args: Prisma.Subset<T, ConstructorAggregateArgs>): Prisma.PrismaPromise<GetConstructorAggregateType<T>>

  /**
   * Group by Constructor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConstructorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConstructorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConstructorGroupByArgs['orderBy'] }
      : { orderBy?: ConstructorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConstructorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConstructorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Constructor model
 */
readonly fields: ConstructorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Constructor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConstructorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  driverRaceWinner<T extends Prisma.Constructor$driverRaceWinnerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Constructor$driverRaceWinnerArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  driverSeasonWinner<T extends Prisma.Constructor$driverSeasonWinnerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Constructor$driverSeasonWinnerArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Constructor model
 */
export interface ConstructorFieldRefs {
  readonly id: Prisma.FieldRef<"Constructor", 'String'>
  readonly constructorId: Prisma.FieldRef<"Constructor", 'String'>
  readonly name: Prisma.FieldRef<"Constructor", 'String'>
  readonly nationality: Prisma.FieldRef<"Constructor", 'String'>
  readonly createdAt: Prisma.FieldRef<"Constructor", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Constructor", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Constructor findUnique
 */
export type ConstructorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * Filter, which Constructor to fetch.
   */
  where: Prisma.ConstructorWhereUniqueInput
}

/**
 * Constructor findUniqueOrThrow
 */
export type ConstructorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * Filter, which Constructor to fetch.
   */
  where: Prisma.ConstructorWhereUniqueInput
}

/**
 * Constructor findFirst
 */
export type ConstructorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * Filter, which Constructor to fetch.
   */
  where?: Prisma.ConstructorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Constructors to fetch.
   */
  orderBy?: Prisma.ConstructorOrderByWithRelationInput | Prisma.ConstructorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Constructors.
   */
  cursor?: Prisma.ConstructorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Constructors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Constructors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Constructors.
   */
  distinct?: Prisma.ConstructorScalarFieldEnum | Prisma.ConstructorScalarFieldEnum[]
}

/**
 * Constructor findFirstOrThrow
 */
export type ConstructorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * Filter, which Constructor to fetch.
   */
  where?: Prisma.ConstructorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Constructors to fetch.
   */
  orderBy?: Prisma.ConstructorOrderByWithRelationInput | Prisma.ConstructorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Constructors.
   */
  cursor?: Prisma.ConstructorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Constructors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Constructors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Constructors.
   */
  distinct?: Prisma.ConstructorScalarFieldEnum | Prisma.ConstructorScalarFieldEnum[]
}

/**
 * Constructor findMany
 */
export type ConstructorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * Filter, which Constructors to fetch.
   */
  where?: Prisma.ConstructorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Constructors to fetch.
   */
  orderBy?: Prisma.ConstructorOrderByWithRelationInput | Prisma.ConstructorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Constructors.
   */
  cursor?: Prisma.ConstructorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Constructors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Constructors.
   */
  skip?: number
  distinct?: Prisma.ConstructorScalarFieldEnum | Prisma.ConstructorScalarFieldEnum[]
}

/**
 * Constructor create
 */
export type ConstructorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * The data needed to create a Constructor.
   */
  data: Prisma.XOR<Prisma.ConstructorCreateInput, Prisma.ConstructorUncheckedCreateInput>
}

/**
 * Constructor createMany
 */
export type ConstructorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Constructors.
   */
  data: Prisma.ConstructorCreateManyInput | Prisma.ConstructorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Constructor createManyAndReturn
 */
export type ConstructorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * The data used to create many Constructors.
   */
  data: Prisma.ConstructorCreateManyInput | Prisma.ConstructorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Constructor update
 */
export type ConstructorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * The data needed to update a Constructor.
   */
  data: Prisma.XOR<Prisma.ConstructorUpdateInput, Prisma.ConstructorUncheckedUpdateInput>
  /**
   * Choose, which Constructor to update.
   */
  where: Prisma.ConstructorWhereUniqueInput
}

/**
 * Constructor updateMany
 */
export type ConstructorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Constructors.
   */
  data: Prisma.XOR<Prisma.ConstructorUpdateManyMutationInput, Prisma.ConstructorUncheckedUpdateManyInput>
  /**
   * Filter which Constructors to update
   */
  where?: Prisma.ConstructorWhereInput
  /**
   * Limit how many Constructors to update.
   */
  limit?: number
}

/**
 * Constructor updateManyAndReturn
 */
export type ConstructorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * The data used to update Constructors.
   */
  data: Prisma.XOR<Prisma.ConstructorUpdateManyMutationInput, Prisma.ConstructorUncheckedUpdateManyInput>
  /**
   * Filter which Constructors to update
   */
  where?: Prisma.ConstructorWhereInput
  /**
   * Limit how many Constructors to update.
   */
  limit?: number
}

/**
 * Constructor upsert
 */
export type ConstructorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * The filter to search for the Constructor to update in case it exists.
   */
  where: Prisma.ConstructorWhereUniqueInput
  /**
   * In case the Constructor found by the `where` argument doesn't exist, create a new Constructor with this data.
   */
  create: Prisma.XOR<Prisma.ConstructorCreateInput, Prisma.ConstructorUncheckedCreateInput>
  /**
   * In case the Constructor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConstructorUpdateInput, Prisma.ConstructorUncheckedUpdateInput>
}

/**
 * Constructor delete
 */
export type ConstructorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
  /**
   * Filter which Constructor to delete.
   */
  where: Prisma.ConstructorWhereUniqueInput
}

/**
 * Constructor deleteMany
 */
export type ConstructorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Constructors to delete
   */
  where?: Prisma.ConstructorWhereInput
  /**
   * Limit how many Constructors to delete.
   */
  limit?: number
}

/**
 * Constructor.driverRaceWinner
 */
export type Constructor$driverRaceWinnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  where?: Prisma.RaceWhereInput
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  cursor?: Prisma.RaceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RaceScalarFieldEnum | Prisma.RaceScalarFieldEnum[]
}

/**
 * Constructor.driverSeasonWinner
 */
export type Constructor$driverSeasonWinnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Season
   */
  select?: Prisma.SeasonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Season
   */
  omit?: Prisma.SeasonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SeasonInclude<ExtArgs> | null
  where?: Prisma.SeasonWhereInput
  orderBy?: Prisma.SeasonOrderByWithRelationInput | Prisma.SeasonOrderByWithRelationInput[]
  cursor?: Prisma.SeasonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SeasonScalarFieldEnum | Prisma.SeasonScalarFieldEnum[]
}

/**
 * Constructor without action
 */
export type ConstructorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Constructor
   */
  select?: Prisma.ConstructorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Constructor
   */
  omit?: Prisma.ConstructorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConstructorInclude<ExtArgs> | null
}
