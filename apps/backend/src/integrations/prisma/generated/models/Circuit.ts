
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Circuit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Circuit
 * 
 */
export type CircuitModel = runtime.Types.Result.DefaultSelection<Prisma.$CircuitPayload>

export type AggregateCircuit = {
  _count: CircuitCountAggregateOutputType | null
  _min: CircuitMinAggregateOutputType | null
  _max: CircuitMaxAggregateOutputType | null
}

export type CircuitMinAggregateOutputType = {
  id: string | null
  circuitId: string | null
  circuitName: string | null
  locationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CircuitMaxAggregateOutputType = {
  id: string | null
  circuitId: string | null
  circuitName: string | null
  locationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CircuitCountAggregateOutputType = {
  id: number
  circuitId: number
  circuitName: number
  locationId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CircuitMinAggregateInputType = {
  id?: true
  circuitId?: true
  circuitName?: true
  locationId?: true
  createdAt?: true
  updatedAt?: true
}

export type CircuitMaxAggregateInputType = {
  id?: true
  circuitId?: true
  circuitName?: true
  locationId?: true
  createdAt?: true
  updatedAt?: true
}

export type CircuitCountAggregateInputType = {
  id?: true
  circuitId?: true
  circuitName?: true
  locationId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CircuitAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Circuit to aggregate.
   */
  where?: Prisma.CircuitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Circuits to fetch.
   */
  orderBy?: Prisma.CircuitOrderByWithRelationInput | Prisma.CircuitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CircuitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Circuits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Circuits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Circuits
  **/
  _count?: true | CircuitCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CircuitMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CircuitMaxAggregateInputType
}

export type GetCircuitAggregateType<T extends CircuitAggregateArgs> = {
      [P in keyof T & keyof AggregateCircuit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCircuit[P]>
    : Prisma.GetScalarType<T[P], AggregateCircuit[P]>
}




export type CircuitGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CircuitWhereInput
  orderBy?: Prisma.CircuitOrderByWithAggregationInput | Prisma.CircuitOrderByWithAggregationInput[]
  by: Prisma.CircuitScalarFieldEnum[] | Prisma.CircuitScalarFieldEnum
  having?: Prisma.CircuitScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CircuitCountAggregateInputType | true
  _min?: CircuitMinAggregateInputType
  _max?: CircuitMaxAggregateInputType
}

export type CircuitGroupByOutputType = {
  id: string
  circuitId: string
  circuitName: string
  locationId: string
  createdAt: Date
  updatedAt: Date
  _count: CircuitCountAggregateOutputType | null
  _min: CircuitMinAggregateOutputType | null
  _max: CircuitMaxAggregateOutputType | null
}

type GetCircuitGroupByPayload<T extends CircuitGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CircuitGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CircuitGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CircuitGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CircuitGroupByOutputType[P]>
      }
    >
  > 



export type CircuitWhereInput = {
  AND?: Prisma.CircuitWhereInput | Prisma.CircuitWhereInput[]
  OR?: Prisma.CircuitWhereInput[]
  NOT?: Prisma.CircuitWhereInput | Prisma.CircuitWhereInput[]
  id?: Prisma.StringFilter<"Circuit"> | string
  circuitId?: Prisma.StringFilter<"Circuit"> | string
  circuitName?: Prisma.StringFilter<"Circuit"> | string
  locationId?: Prisma.StringFilter<"Circuit"> | string
  createdAt?: Prisma.DateTimeFilter<"Circuit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Circuit"> | Date | string
  location?: Prisma.XOR<Prisma.LocationScalarRelationFilter, Prisma.LocationWhereInput>
  races?: Prisma.RaceListRelationFilter
}

export type CircuitOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  circuitName?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  location?: Prisma.LocationOrderByWithRelationInput
  races?: Prisma.RaceOrderByRelationAggregateInput
}

export type CircuitWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  circuitId?: string
  locationId?: string
  AND?: Prisma.CircuitWhereInput | Prisma.CircuitWhereInput[]
  OR?: Prisma.CircuitWhereInput[]
  NOT?: Prisma.CircuitWhereInput | Prisma.CircuitWhereInput[]
  circuitName?: Prisma.StringFilter<"Circuit"> | string
  createdAt?: Prisma.DateTimeFilter<"Circuit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Circuit"> | Date | string
  location?: Prisma.XOR<Prisma.LocationScalarRelationFilter, Prisma.LocationWhereInput>
  races?: Prisma.RaceListRelationFilter
}, "id" | "circuitId" | "locationId">

export type CircuitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  circuitName?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CircuitCountOrderByAggregateInput
  _max?: Prisma.CircuitMaxOrderByAggregateInput
  _min?: Prisma.CircuitMinOrderByAggregateInput
}

export type CircuitScalarWhereWithAggregatesInput = {
  AND?: Prisma.CircuitScalarWhereWithAggregatesInput | Prisma.CircuitScalarWhereWithAggregatesInput[]
  OR?: Prisma.CircuitScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CircuitScalarWhereWithAggregatesInput | Prisma.CircuitScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Circuit"> | string
  circuitId?: Prisma.StringWithAggregatesFilter<"Circuit"> | string
  circuitName?: Prisma.StringWithAggregatesFilter<"Circuit"> | string
  locationId?: Prisma.StringWithAggregatesFilter<"Circuit"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Circuit"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Circuit"> | Date | string
}

export type CircuitCreateInput = {
  id?: string
  circuitId: string
  circuitName: string
  createdAt?: Date | string
  updatedAt?: Date | string
  location: Prisma.LocationCreateNestedOneWithoutCircuitInput
  races?: Prisma.RaceCreateNestedManyWithoutCircuitInput
}

export type CircuitUncheckedCreateInput = {
  id?: string
  circuitId: string
  circuitName: string
  locationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  races?: Prisma.RaceUncheckedCreateNestedManyWithoutCircuitInput
}

export type CircuitUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  circuitName?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  location?: Prisma.LocationUpdateOneRequiredWithoutCircuitNestedInput
  races?: Prisma.RaceUpdateManyWithoutCircuitNestedInput
}

export type CircuitUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  circuitName?: Prisma.StringFieldUpdateOperationsInput | string
  locationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  races?: Prisma.RaceUncheckedUpdateManyWithoutCircuitNestedInput
}

export type CircuitCreateManyInput = {
  id?: string
  circuitId: string
  circuitName: string
  locationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CircuitUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  circuitName?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CircuitUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  circuitName?: Prisma.StringFieldUpdateOperationsInput | string
  locationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CircuitScalarRelationFilter = {
  is?: Prisma.CircuitWhereInput
  isNot?: Prisma.CircuitWhereInput
}

export type CircuitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  circuitName?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CircuitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  circuitName?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CircuitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  circuitId?: Prisma.SortOrder
  circuitName?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CircuitNullableScalarRelationFilter = {
  is?: Prisma.CircuitWhereInput | null
  isNot?: Prisma.CircuitWhereInput | null
}

export type CircuitCreateNestedOneWithoutRacesInput = {
  create?: Prisma.XOR<Prisma.CircuitCreateWithoutRacesInput, Prisma.CircuitUncheckedCreateWithoutRacesInput>
  connectOrCreate?: Prisma.CircuitCreateOrConnectWithoutRacesInput
  connect?: Prisma.CircuitWhereUniqueInput
}

export type CircuitUpdateOneRequiredWithoutRacesNestedInput = {
  create?: Prisma.XOR<Prisma.CircuitCreateWithoutRacesInput, Prisma.CircuitUncheckedCreateWithoutRacesInput>
  connectOrCreate?: Prisma.CircuitCreateOrConnectWithoutRacesInput
  upsert?: Prisma.CircuitUpsertWithoutRacesInput
  connect?: Prisma.CircuitWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CircuitUpdateToOneWithWhereWithoutRacesInput, Prisma.CircuitUpdateWithoutRacesInput>, Prisma.CircuitUncheckedUpdateWithoutRacesInput>
}

export type CircuitCreateNestedOneWithoutLocationInput = {
  create?: Prisma.XOR<Prisma.CircuitCreateWithoutLocationInput, Prisma.CircuitUncheckedCreateWithoutLocationInput>
  connectOrCreate?: Prisma.CircuitCreateOrConnectWithoutLocationInput
  connect?: Prisma.CircuitWhereUniqueInput
}

export type CircuitUncheckedCreateNestedOneWithoutLocationInput = {
  create?: Prisma.XOR<Prisma.CircuitCreateWithoutLocationInput, Prisma.CircuitUncheckedCreateWithoutLocationInput>
  connectOrCreate?: Prisma.CircuitCreateOrConnectWithoutLocationInput
  connect?: Prisma.CircuitWhereUniqueInput
}

export type CircuitUpdateOneWithoutLocationNestedInput = {
  create?: Prisma.XOR<Prisma.CircuitCreateWithoutLocationInput, Prisma.CircuitUncheckedCreateWithoutLocationInput>
  connectOrCreate?: Prisma.CircuitCreateOrConnectWithoutLocationInput
  upsert?: Prisma.CircuitUpsertWithoutLocationInput
  disconnect?: Prisma.CircuitWhereInput | boolean
  delete?: Prisma.CircuitWhereInput | boolean
  connect?: Prisma.CircuitWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CircuitUpdateToOneWithWhereWithoutLocationInput, Prisma.CircuitUpdateWithoutLocationInput>, Prisma.CircuitUncheckedUpdateWithoutLocationInput>
}

export type CircuitUncheckedUpdateOneWithoutLocationNestedInput = {
  create?: Prisma.XOR<Prisma.CircuitCreateWithoutLocationInput, Prisma.CircuitUncheckedCreateWithoutLocationInput>
  connectOrCreate?: Prisma.CircuitCreateOrConnectWithoutLocationInput
  upsert?: Prisma.CircuitUpsertWithoutLocationInput
  disconnect?: Prisma.CircuitWhereInput | boolean
  delete?: Prisma.CircuitWhereInput | boolean
  connect?: Prisma.CircuitWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CircuitUpdateToOneWithWhereWithoutLocationInput, Prisma.CircuitUpdateWithoutLocationInput>, Prisma.CircuitUncheckedUpdateWithoutLocationInput>
}

export type CircuitCreateWithoutRacesInput = {
  id?: string
  circuitId: string
  circuitName: string
  createdAt?: Date | string
  updatedAt?: Date | string
  location: Prisma.LocationCreateNestedOneWithoutCircuitInput
}

export type CircuitUncheckedCreateWithoutRacesInput = {
  id?: string
  circuitId: string
  circuitName: string
  locationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CircuitCreateOrConnectWithoutRacesInput = {
  where: Prisma.CircuitWhereUniqueInput
  create: Prisma.XOR<Prisma.CircuitCreateWithoutRacesInput, Prisma.CircuitUncheckedCreateWithoutRacesInput>
}

export type CircuitUpsertWithoutRacesInput = {
  update: Prisma.XOR<Prisma.CircuitUpdateWithoutRacesInput, Prisma.CircuitUncheckedUpdateWithoutRacesInput>
  create: Prisma.XOR<Prisma.CircuitCreateWithoutRacesInput, Prisma.CircuitUncheckedCreateWithoutRacesInput>
  where?: Prisma.CircuitWhereInput
}

export type CircuitUpdateToOneWithWhereWithoutRacesInput = {
  where?: Prisma.CircuitWhereInput
  data: Prisma.XOR<Prisma.CircuitUpdateWithoutRacesInput, Prisma.CircuitUncheckedUpdateWithoutRacesInput>
}

export type CircuitUpdateWithoutRacesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  circuitName?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  location?: Prisma.LocationUpdateOneRequiredWithoutCircuitNestedInput
}

export type CircuitUncheckedUpdateWithoutRacesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  circuitName?: Prisma.StringFieldUpdateOperationsInput | string
  locationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CircuitCreateWithoutLocationInput = {
  id?: string
  circuitId: string
  circuitName: string
  createdAt?: Date | string
  updatedAt?: Date | string
  races?: Prisma.RaceCreateNestedManyWithoutCircuitInput
}

export type CircuitUncheckedCreateWithoutLocationInput = {
  id?: string
  circuitId: string
  circuitName: string
  createdAt?: Date | string
  updatedAt?: Date | string
  races?: Prisma.RaceUncheckedCreateNestedManyWithoutCircuitInput
}

export type CircuitCreateOrConnectWithoutLocationInput = {
  where: Prisma.CircuitWhereUniqueInput
  create: Prisma.XOR<Prisma.CircuitCreateWithoutLocationInput, Prisma.CircuitUncheckedCreateWithoutLocationInput>
}

export type CircuitUpsertWithoutLocationInput = {
  update: Prisma.XOR<Prisma.CircuitUpdateWithoutLocationInput, Prisma.CircuitUncheckedUpdateWithoutLocationInput>
  create: Prisma.XOR<Prisma.CircuitCreateWithoutLocationInput, Prisma.CircuitUncheckedCreateWithoutLocationInput>
  where?: Prisma.CircuitWhereInput
}

export type CircuitUpdateToOneWithWhereWithoutLocationInput = {
  where?: Prisma.CircuitWhereInput
  data: Prisma.XOR<Prisma.CircuitUpdateWithoutLocationInput, Prisma.CircuitUncheckedUpdateWithoutLocationInput>
}

export type CircuitUpdateWithoutLocationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  circuitName?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  races?: Prisma.RaceUpdateManyWithoutCircuitNestedInput
}

export type CircuitUncheckedUpdateWithoutLocationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  circuitId?: Prisma.StringFieldUpdateOperationsInput | string
  circuitName?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  races?: Prisma.RaceUncheckedUpdateManyWithoutCircuitNestedInput
}


/**
 * Count Type CircuitCountOutputType
 */

export type CircuitCountOutputType = {
  races: number
}

export type CircuitCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  races?: boolean | CircuitCountOutputTypeCountRacesArgs
}

/**
 * CircuitCountOutputType without action
 */
export type CircuitCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CircuitCountOutputType
   */
  select?: Prisma.CircuitCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CircuitCountOutputType without action
 */
export type CircuitCountOutputTypeCountRacesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RaceWhereInput
}


export type CircuitSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  circuitId?: boolean
  circuitName?: boolean
  locationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
  races?: boolean | Prisma.Circuit$racesArgs<ExtArgs>
  _count?: boolean | Prisma.CircuitCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["circuit"]>

export type CircuitSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  circuitId?: boolean
  circuitName?: boolean
  locationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["circuit"]>

export type CircuitSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  circuitId?: boolean
  circuitName?: boolean
  locationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["circuit"]>

export type CircuitSelectScalar = {
  id?: boolean
  circuitId?: boolean
  circuitName?: boolean
  locationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CircuitOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "circuitId" | "circuitName" | "locationId" | "createdAt" | "updatedAt", ExtArgs["result"]["circuit"]>
export type CircuitInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
  races?: boolean | Prisma.Circuit$racesArgs<ExtArgs>
  _count?: boolean | Prisma.CircuitCountOutputTypeDefaultArgs<ExtArgs>
}
export type CircuitIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
}
export type CircuitIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
}

export type $CircuitPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Circuit"
  objects: {
    location: Prisma.$LocationPayload<ExtArgs>
    races: Prisma.$RacePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    circuitId: string
    circuitName: string
    locationId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["circuit"]>
  composites: {}
}

export type CircuitGetPayload<S extends boolean | null | undefined | CircuitDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CircuitPayload, S>

export type CircuitCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CircuitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CircuitCountAggregateInputType | true
  }

export interface CircuitDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Circuit'], meta: { name: 'Circuit' } }
  /**
   * Find zero or one Circuit that matches the filter.
   * @param {CircuitFindUniqueArgs} args - Arguments to find a Circuit
   * @example
   * // Get one Circuit
   * const circuit = await prisma.circuit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CircuitFindUniqueArgs>(args: Prisma.SelectSubset<T, CircuitFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Circuit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CircuitFindUniqueOrThrowArgs} args - Arguments to find a Circuit
   * @example
   * // Get one Circuit
   * const circuit = await prisma.circuit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CircuitFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CircuitFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Circuit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CircuitFindFirstArgs} args - Arguments to find a Circuit
   * @example
   * // Get one Circuit
   * const circuit = await prisma.circuit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CircuitFindFirstArgs>(args?: Prisma.SelectSubset<T, CircuitFindFirstArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Circuit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CircuitFindFirstOrThrowArgs} args - Arguments to find a Circuit
   * @example
   * // Get one Circuit
   * const circuit = await prisma.circuit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CircuitFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CircuitFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Circuits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CircuitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Circuits
   * const circuits = await prisma.circuit.findMany()
   * 
   * // Get first 10 Circuits
   * const circuits = await prisma.circuit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const circuitWithIdOnly = await prisma.circuit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CircuitFindManyArgs>(args?: Prisma.SelectSubset<T, CircuitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Circuit.
   * @param {CircuitCreateArgs} args - Arguments to create a Circuit.
   * @example
   * // Create one Circuit
   * const Circuit = await prisma.circuit.create({
   *   data: {
   *     // ... data to create a Circuit
   *   }
   * })
   * 
   */
  create<T extends CircuitCreateArgs>(args: Prisma.SelectSubset<T, CircuitCreateArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Circuits.
   * @param {CircuitCreateManyArgs} args - Arguments to create many Circuits.
   * @example
   * // Create many Circuits
   * const circuit = await prisma.circuit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CircuitCreateManyArgs>(args?: Prisma.SelectSubset<T, CircuitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Circuits and returns the data saved in the database.
   * @param {CircuitCreateManyAndReturnArgs} args - Arguments to create many Circuits.
   * @example
   * // Create many Circuits
   * const circuit = await prisma.circuit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Circuits and only return the `id`
   * const circuitWithIdOnly = await prisma.circuit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CircuitCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CircuitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Circuit.
   * @param {CircuitDeleteArgs} args - Arguments to delete one Circuit.
   * @example
   * // Delete one Circuit
   * const Circuit = await prisma.circuit.delete({
   *   where: {
   *     // ... filter to delete one Circuit
   *   }
   * })
   * 
   */
  delete<T extends CircuitDeleteArgs>(args: Prisma.SelectSubset<T, CircuitDeleteArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Circuit.
   * @param {CircuitUpdateArgs} args - Arguments to update one Circuit.
   * @example
   * // Update one Circuit
   * const circuit = await prisma.circuit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CircuitUpdateArgs>(args: Prisma.SelectSubset<T, CircuitUpdateArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Circuits.
   * @param {CircuitDeleteManyArgs} args - Arguments to filter Circuits to delete.
   * @example
   * // Delete a few Circuits
   * const { count } = await prisma.circuit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CircuitDeleteManyArgs>(args?: Prisma.SelectSubset<T, CircuitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Circuits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CircuitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Circuits
   * const circuit = await prisma.circuit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CircuitUpdateManyArgs>(args: Prisma.SelectSubset<T, CircuitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Circuits and returns the data updated in the database.
   * @param {CircuitUpdateManyAndReturnArgs} args - Arguments to update many Circuits.
   * @example
   * // Update many Circuits
   * const circuit = await prisma.circuit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Circuits and only return the `id`
   * const circuitWithIdOnly = await prisma.circuit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CircuitUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CircuitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Circuit.
   * @param {CircuitUpsertArgs} args - Arguments to update or create a Circuit.
   * @example
   * // Update or create a Circuit
   * const circuit = await prisma.circuit.upsert({
   *   create: {
   *     // ... data to create a Circuit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Circuit we want to update
   *   }
   * })
   */
  upsert<T extends CircuitUpsertArgs>(args: Prisma.SelectSubset<T, CircuitUpsertArgs<ExtArgs>>): Prisma.Prisma__CircuitClient<runtime.Types.Result.GetResult<Prisma.$CircuitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Circuits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CircuitCountArgs} args - Arguments to filter Circuits to count.
   * @example
   * // Count the number of Circuits
   * const count = await prisma.circuit.count({
   *   where: {
   *     // ... the filter for the Circuits we want to count
   *   }
   * })
  **/
  count<T extends CircuitCountArgs>(
    args?: Prisma.Subset<T, CircuitCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CircuitCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Circuit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CircuitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CircuitAggregateArgs>(args: Prisma.Subset<T, CircuitAggregateArgs>): Prisma.PrismaPromise<GetCircuitAggregateType<T>>

  /**
   * Group by Circuit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CircuitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CircuitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CircuitGroupByArgs['orderBy'] }
      : { orderBy?: CircuitGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CircuitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCircuitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Circuit model
 */
readonly fields: CircuitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Circuit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CircuitClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  location<T extends Prisma.LocationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LocationDefaultArgs<ExtArgs>>): Prisma.Prisma__LocationClient<runtime.Types.Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  races<T extends Prisma.Circuit$racesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Circuit$racesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Circuit model
 */
export interface CircuitFieldRefs {
  readonly id: Prisma.FieldRef<"Circuit", 'String'>
  readonly circuitId: Prisma.FieldRef<"Circuit", 'String'>
  readonly circuitName: Prisma.FieldRef<"Circuit", 'String'>
  readonly locationId: Prisma.FieldRef<"Circuit", 'String'>
  readonly createdAt: Prisma.FieldRef<"Circuit", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Circuit", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Circuit findUnique
 */
export type CircuitFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * Filter, which Circuit to fetch.
   */
  where: Prisma.CircuitWhereUniqueInput
}

/**
 * Circuit findUniqueOrThrow
 */
export type CircuitFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * Filter, which Circuit to fetch.
   */
  where: Prisma.CircuitWhereUniqueInput
}

/**
 * Circuit findFirst
 */
export type CircuitFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * Filter, which Circuit to fetch.
   */
  where?: Prisma.CircuitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Circuits to fetch.
   */
  orderBy?: Prisma.CircuitOrderByWithRelationInput | Prisma.CircuitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Circuits.
   */
  cursor?: Prisma.CircuitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Circuits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Circuits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Circuits.
   */
  distinct?: Prisma.CircuitScalarFieldEnum | Prisma.CircuitScalarFieldEnum[]
}

/**
 * Circuit findFirstOrThrow
 */
export type CircuitFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * Filter, which Circuit to fetch.
   */
  where?: Prisma.CircuitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Circuits to fetch.
   */
  orderBy?: Prisma.CircuitOrderByWithRelationInput | Prisma.CircuitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Circuits.
   */
  cursor?: Prisma.CircuitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Circuits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Circuits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Circuits.
   */
  distinct?: Prisma.CircuitScalarFieldEnum | Prisma.CircuitScalarFieldEnum[]
}

/**
 * Circuit findMany
 */
export type CircuitFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * Filter, which Circuits to fetch.
   */
  where?: Prisma.CircuitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Circuits to fetch.
   */
  orderBy?: Prisma.CircuitOrderByWithRelationInput | Prisma.CircuitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Circuits.
   */
  cursor?: Prisma.CircuitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Circuits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Circuits.
   */
  skip?: number
  distinct?: Prisma.CircuitScalarFieldEnum | Prisma.CircuitScalarFieldEnum[]
}

/**
 * Circuit create
 */
export type CircuitCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * The data needed to create a Circuit.
   */
  data: Prisma.XOR<Prisma.CircuitCreateInput, Prisma.CircuitUncheckedCreateInput>
}

/**
 * Circuit createMany
 */
export type CircuitCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Circuits.
   */
  data: Prisma.CircuitCreateManyInput | Prisma.CircuitCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Circuit createManyAndReturn
 */
export type CircuitCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * The data used to create many Circuits.
   */
  data: Prisma.CircuitCreateManyInput | Prisma.CircuitCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Circuit update
 */
export type CircuitUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * The data needed to update a Circuit.
   */
  data: Prisma.XOR<Prisma.CircuitUpdateInput, Prisma.CircuitUncheckedUpdateInput>
  /**
   * Choose, which Circuit to update.
   */
  where: Prisma.CircuitWhereUniqueInput
}

/**
 * Circuit updateMany
 */
export type CircuitUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Circuits.
   */
  data: Prisma.XOR<Prisma.CircuitUpdateManyMutationInput, Prisma.CircuitUncheckedUpdateManyInput>
  /**
   * Filter which Circuits to update
   */
  where?: Prisma.CircuitWhereInput
  /**
   * Limit how many Circuits to update.
   */
  limit?: number
}

/**
 * Circuit updateManyAndReturn
 */
export type CircuitUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * The data used to update Circuits.
   */
  data: Prisma.XOR<Prisma.CircuitUpdateManyMutationInput, Prisma.CircuitUncheckedUpdateManyInput>
  /**
   * Filter which Circuits to update
   */
  where?: Prisma.CircuitWhereInput
  /**
   * Limit how many Circuits to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Circuit upsert
 */
export type CircuitUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * The filter to search for the Circuit to update in case it exists.
   */
  where: Prisma.CircuitWhereUniqueInput
  /**
   * In case the Circuit found by the `where` argument doesn't exist, create a new Circuit with this data.
   */
  create: Prisma.XOR<Prisma.CircuitCreateInput, Prisma.CircuitUncheckedCreateInput>
  /**
   * In case the Circuit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CircuitUpdateInput, Prisma.CircuitUncheckedUpdateInput>
}

/**
 * Circuit delete
 */
export type CircuitDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
  /**
   * Filter which Circuit to delete.
   */
  where: Prisma.CircuitWhereUniqueInput
}

/**
 * Circuit deleteMany
 */
export type CircuitDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Circuits to delete
   */
  where?: Prisma.CircuitWhereInput
  /**
   * Limit how many Circuits to delete.
   */
  limit?: number
}

/**
 * Circuit.races
 */
export type Circuit$racesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Race
   */
  select?: Prisma.RaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Race
   */
  omit?: Prisma.RaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RaceInclude<ExtArgs> | null
  where?: Prisma.RaceWhereInput
  orderBy?: Prisma.RaceOrderByWithRelationInput | Prisma.RaceOrderByWithRelationInput[]
  cursor?: Prisma.RaceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RaceScalarFieldEnum | Prisma.RaceScalarFieldEnum[]
}

/**
 * Circuit without action
 */
export type CircuitDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Circuit
   */
  select?: Prisma.CircuitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Circuit
   */
  omit?: Prisma.CircuitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CircuitInclude<ExtArgs> | null
}
