services:
  jenkins:
    container_name: "jenkins"
    image: "jenkins"
    build:
      context: ./docker/jenkins
      dockerfile: Dockerfile
    profiles: ["jenkins"]
    restart: always
    environment:
      DB_CONN_STRING: postgresql://${DB_USER}:${DB_PASSWORD}@postgresql:5432/${DB_DATABASE}
      TEST_DB_CONN_STRING: postgresql://${TEST_DB_USER}:${TEST_DB_PASSWORD}@postgresql-test:5432/${TEST_DB_DATABASE}
    ports:
      - 8080:8080
      - 50000:50000
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock

  postgresql-test:
    container_name: "postgresql-test"
    image: postgres:latest
    restart: always
    profiles: [ "jenkins" ]
    environment:
      POSTGRES_USER: ${TEST_DB_USER}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD}
      POSTGRES_DB: ${TEST_DB_DATABASE}
    ports:
      - ${TEST_DB_PORT}:5432
    volumes:
      - postgresql_test_data:/var/lib/postgresql/data

  postgresql:
    container_name: "postgresql"
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - ${DB_PORT}:5432
    volumes:
      - postgresql_data:/var/lib/postgresql/data

  adminer:
    container_name: "adminer"
    image: adminer
    profiles: ["jenkins"]
    restart: always
    ports:
      - 8085:8080

  base-build:
    image: "builder-base"
    build:
      dockerfile: docker/app/Dockerfile.base-build
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      postgresql:
        condition: service_healthy

  backend:
    container_name: "backend"
    image: "backend"
    build:
      dockerfile: docker/app/Dockerfile.backend
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - "3333:3333"
    depends_on:
      - base-build

  frontend:
    container_name: "frontend"
    image: "frontend"
    build:
      dockerfile: docker/app/Dockerfile.frontend
    restart: unless-stopped
    environment:
      BACKEND_DOMAIN: ${BACKEND_DOMAIN}
    ports:
      - "3444:3000"
    depends_on:
      - base-build

  cloudflare:
    container_name: f1-cloudflare
    image: cloudflare/cloudflared:latest
    command: tunnel run
    restart: unless-stopped
    profiles: [ "cloudflare" ]
    environment:
      - TUNNEL_TOKEN=${CLOUD_FLARE_TUNNEL_TOKEN}

volumes:
  postgresql_data:
  postgresql_test_data:
  jenkins_data:
  registry_data: